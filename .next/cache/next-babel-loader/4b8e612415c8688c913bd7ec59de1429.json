{"ast":null,"code":"!function (e) {\n  if (\"object\" == typeof exports && \"undefined\" != typeof module) module.exports = e();else if (\"function\" == typeof define && define.amd) define([], e);else {\n    var f;\n    false ? f = window : \"undefined\" != typeof global ? f = global : \"undefined\" != typeof self && (f = self), f.BandJS = e();\n  }\n}(function () {\n  var define, module, exports;\n  return function e(t, n, r) {\n    function s(o, u) {\n      if (!n[o]) {\n        if (!t[o]) {\n          var a = typeof require == \"function\" && require;\n          if (!u && a) return a(o, !0);\n          if (i) return i(o, !0);\n          throw new Error(\"Cannot find module '\" + o + \"'\");\n        }\n\n        var f = n[o] = {\n          exports: {}\n        };\n        t[o][0].call(f.exports, function (e) {\n          var n = t[o][1][e];\n          return s(n ? n : e);\n        }, f, f.exports, e, t, n, r);\n      }\n\n      return n[o].exports;\n    }\n\n    var i = typeof require == \"function\" && require;\n\n    for (var o = 0; o < r.length; o++) s(r[o]);\n\n    return s;\n  }({\n    1: [function (_dereq_, module, exports) {\n      /*\r\n       * Web Audio API AudioContext shim\r\n       */\n      (function (definition) {\n        if (typeof exports === \"object\") {\n          module.exports = definition();\n        }\n      })(function () {\n        return window.AudioContext || window.webkitAudioContext;\n      });\n    }, {}],\n    2: [function (_dereq_, module, exports) {\n      /**\r\n       * Band.js - Music Composer\r\n       * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n       * time signatures.\r\n       *\r\n       * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n       */\n      module.exports = Conductor;\n      var packs = {\n        instrument: {},\n        rhythm: {},\n        tuning: {}\n      };\n      /**\r\n       * Conductor Class - This gets instantiated when `new BandJS()` is called\r\n       *\r\n       * @param tuning\r\n       * @param rhythm\r\n       * @constructor\r\n       */\n\n      function Conductor(tuning, rhythm) {\n        if (!tuning) {\n          tuning = 'equalTemperament';\n        }\n\n        if (!rhythm) {\n          rhythm = 'northAmerican';\n        }\n\n        if (typeof packs.tuning[tuning] === 'undefined') {\n          throw new Error(tuning + ' is not a valid tuning pack.');\n        }\n\n        if (typeof packs.rhythm[rhythm] === 'undefined') {\n          throw new Error(rhythm + ' is not a valid rhythm pack.');\n        }\n\n        var conductor = this,\n            player,\n            noop = function () {},\n            AudioContext = _dereq_('audiocontext'),\n            signatureToNoteLengthRatio = {\n          2: 6,\n          4: 3,\n          8: 4.50\n        };\n\n        conductor.packs = packs;\n        conductor.pitches = packs.tuning[tuning];\n        conductor.notes = packs.rhythm[rhythm];\n        conductor.audioContext = new AudioContext();\n        conductor.masterVolumeLevel = null;\n        conductor.masterVolume = conductor.audioContext.createGain();\n        conductor.masterVolume.connect(conductor.audioContext.destination);\n        conductor.beatsPerBar = null;\n        conductor.noteGetsBeat = null;\n        conductor.tempo = null;\n        conductor.instruments = [];\n        conductor.totalDuration = 0;\n        conductor.currentSeconds = 0;\n        conductor.percentageComplete = 0;\n        conductor.noteBufferLength = 20;\n        conductor.onTickerCallback = noop;\n        conductor.onFinishedCallback = noop;\n        conductor.onDurationChangeCallback = noop;\n        /**\r\n         * Use JSON to load in a song to be played\r\n         *\r\n         * @param json\r\n         */\n\n        conductor.load = function (json) {\n          // Clear out any previous song\n          if (conductor.instruments.length > 0) {\n            conductor.destroy();\n          }\n\n          if (!json) {\n            throw new Error('JSON is required for this method to work.');\n          } // Need to have at least instruments and notes\n\n\n          if (typeof json.instruments === 'undefined') {\n            throw new Error('You must define at least one instrument');\n          }\n\n          if (typeof json.notes === 'undefined') {\n            throw new Error('You must define notes for each instrument');\n          } // Shall we set a time signature?\n\n\n          if (typeof json.timeSignature !== 'undefined') {\n            conductor.setTimeSignature(json.timeSignature[0], json.timeSignature[1]);\n          } // Maybe some tempo?\n\n\n          if (typeof json.tempo !== 'undefined') {\n            conductor.setTempo(json.tempo);\n          } // Lets create some instruments\n\n\n          var instrumentList = {};\n\n          for (var instrument in json.instruments) {\n            if (!json.instruments.hasOwnProperty(instrument)) {\n              continue;\n            }\n\n            instrumentList[instrument] = conductor.createInstrument(json.instruments[instrument].name, json.instruments[instrument].pack);\n          } // Now lets add in each of the notes\n\n\n          for (var inst in json.notes) {\n            if (!json.notes.hasOwnProperty(inst)) {\n              continue;\n            }\n\n            var index = -1;\n\n            while (++index < json.notes[inst].length) {\n              var note = json.notes[inst][index]; // Use shorthand if it's a string\n\n              if (typeof note === 'string') {\n                var noteParts = note.split('|');\n\n                if ('rest' === noteParts[1]) {\n                  instrumentList[inst].rest(noteParts[0]);\n                } else {\n                  instrumentList[inst].note(noteParts[0], noteParts[1], noteParts[2]);\n                } // Otherwise use longhand\n\n              } else {\n                if ('rest' === note.type) {\n                  instrumentList[inst].rest(note.rhythm);\n                } else if ('note' === note.type) {\n                  instrumentList[inst].note(note.rhythm, note.pitch, note.tie);\n                }\n              }\n            }\n          } // Looks like we are done, lets press it.\n\n\n          return conductor.finish();\n        };\n        /**\r\n         * Create a new instrument\r\n         *\r\n         * @param [name] - defaults to sine\r\n         * @param [pack] - defaults to oscillators\r\n         */\n\n\n        conductor.createInstrument = function (name, pack) {\n          var Instrument = _dereq_('./instrument.js'),\n              instrument = new Instrument(name, pack, conductor);\n\n          conductor.instruments.push(instrument);\n          return instrument;\n        };\n        /**\r\n         * Needs to be called after all the instruments have been filled with notes.\r\n         * It will figure out the total duration of the song based on the longest\r\n         * duration out of all the instruments.  It will then pass back the Player Object\r\n         * which is used to control the music (play, stop, pause, loop, volume, tempo)\r\n         *\r\n         * It returns the Player object.\r\n         */\n\n\n        conductor.finish = function () {\n          var Player = _dereq_('./player.js');\n\n          player = new Player(conductor);\n          return player;\n        };\n        /**\r\n         * Remove all instruments and recreate AudioContext\r\n         */\n\n\n        conductor.destroy = function () {\n          conductor.audioContext = new AudioContext();\n          conductor.instruments.length = 0;\n          conductor.masterVolume = conductor.audioContext.createGain();\n          conductor.masterVolume.connect(conductor.audioContext.destination);\n        };\n        /**\r\n         * Set Master Volume\r\n         */\n\n\n        conductor.setMasterVolume = function (volume) {\n          if (volume > 1) {\n            volume = volume / 100;\n          }\n\n          conductor.masterVolumeLevel = volume;\n          conductor.masterVolume.gain.setValueAtTime(volume, conductor.audioContext.currentTime);\n        };\n        /**\r\n         * Grab the total duration of a song\r\n         *\r\n         * @returns {number}\r\n         */\n\n\n        conductor.getTotalSeconds = function () {\n          return Math.round(conductor.totalDuration);\n        };\n        /**\r\n         * Sets the ticker callback function. This function will be called\r\n         * every time the current seconds has changed.\r\n         *\r\n         * @param cb function\r\n         */\n\n\n        conductor.setTickerCallback = function (cb) {\n          if (typeof cb !== 'function') {\n            throw new Error('Ticker must be a function.');\n          }\n\n          conductor.onTickerCallback = cb;\n        };\n        /**\r\n         * Sets the time signature for the music. Just like in notation 4/4 time would be setTimeSignature(4, 4);\r\n         * @param top - Number of beats per bar\r\n         * @param bottom - What note type has the beat\r\n         */\n\n\n        conductor.setTimeSignature = function (top, bottom) {\n          if (typeof signatureToNoteLengthRatio[bottom] === 'undefined') {\n            throw new Error('The bottom time signature is not supported.');\n          } // Not used at the moment, but will be handy in the future.\n\n\n          conductor.beatsPerBar = top;\n          conductor.noteGetsBeat = signatureToNoteLengthRatio[bottom];\n        };\n        /**\r\n         * Sets the tempo\r\n         *\r\n         * @param t\r\n         */\n\n\n        conductor.setTempo = function (t) {\n          conductor.tempo = 60 / t; // If we have a player instance, we need to recalculate duration after resetting the tempo.\n\n          if (player) {\n            player.resetTempo();\n            conductor.onDurationChangeCallback();\n          }\n        };\n        /**\r\n         * Set a callback to fire when the song is finished\r\n         *\r\n         * @param cb\r\n         */\n\n\n        conductor.setOnFinishedCallback = function (cb) {\n          if (typeof cb !== 'function') {\n            throw new Error('onFinished callback must be a function.');\n          }\n\n          conductor.onFinishedCallback = cb;\n        };\n        /**\r\n         * Set a callback to fire when duration of a song changes\r\n         *\r\n         * @param cb\r\n         */\n\n\n        conductor.setOnDurationChangeCallback = function (cb) {\n          if (typeof cb !== 'function') {\n            throw new Error('onDurationChanged callback must be a function.');\n          }\n\n          conductor.onDurationChangeCallback = cb;\n        };\n        /**\r\n         * Set the number of notes that are buffered every (tempo / 60 * 5) seconds.\r\n         * It's set to 20 notes by default.\r\n         *\r\n         * **WARNING** The higher this is, the more memory is used and can crash your browser.\r\n         *             If notes are being dropped, you can increase this, but be weary of\r\n         *             used memory.\r\n         *\r\n         * @param {Integer} len\r\n         */\n\n\n        conductor.setNoteBufferLength = function (len) {\n          conductor.noteBufferLength = len;\n        };\n\n        conductor.setMasterVolume(100);\n        conductor.setTempo(120);\n        conductor.setTimeSignature(4, 4);\n      }\n\n      Conductor.loadPack = function (type, name, data) {\n        if (['tuning', 'rhythm', 'instrument'].indexOf(type) === -1) {\n          throw new Error(type + ' is not a valid Pack Type.');\n        }\n\n        if (typeof packs[type][name] !== 'undefined') {\n          throw new Error('A(n) ' + type + ' pack with the name \"' + name + '\" has already been loaded.');\n        }\n\n        packs[type][name] = data;\n      };\n    }, {\n      \"./instrument.js\": 5,\n      \"./player.js\": 7,\n      \"audiocontext\": 1\n    }],\n    3: [function (_dereq_, module, exports) {\n      /**\r\n       * Band.js - Music Composer\r\n       * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n       * time signatures.\r\n       *\r\n       * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n       */\n      module.exports = NoisesInstrumentPack;\n      /**\r\n       * Noises Instrument Pack\r\n       *\r\n       * Adapted from: https://github.com/zacharydenton/noise.js\r\n       *\r\n       * @param name\r\n       * @param audioContext\r\n       * @returns {{createNote: createNote}}\r\n       * @constructor\r\n       */\n\n      function NoisesInstrumentPack(name, audioContext) {\n        var types = ['white', 'pink', 'brown', 'brownian', 'red'];\n\n        if (types.indexOf(name) === -1) {\n          throw new Error(name + ' is not a valid noise sound');\n        }\n\n        return {\n          createNote: function (destination) {\n            switch (name) {\n              case 'white':\n                return createWhiteNoise(destination);\n\n              case 'pink':\n                return createPinkNoise(destination);\n\n              case 'brown':\n              case 'brownian':\n              case 'red':\n                return createBrownianNoise(destination);\n            }\n          }\n        };\n\n        function createWhiteNoise(destination) {\n          var bufferSize = 2 * audioContext.sampleRate,\n              noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate),\n              output = noiseBuffer.getChannelData(0);\n\n          for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n          }\n\n          var whiteNoise = audioContext.createBufferSource();\n          whiteNoise.buffer = noiseBuffer;\n          whiteNoise.loop = true;\n          whiteNoise.connect(destination);\n          return whiteNoise;\n        }\n\n        function createPinkNoise(destination) {\n          var bufferSize = 2 * audioContext.sampleRate,\n              noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate),\n              output = noiseBuffer.getChannelData(0),\n              b0,\n              b1,\n              b2,\n              b3,\n              b4,\n              b5,\n              b6;\n          b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\n          for (var i = 0; i < bufferSize; i++) {\n            var white = Math.random() * 2 - 1;\n            b0 = 0.99886 * b0 + white * 0.0555179;\n            b1 = 0.99332 * b1 + white * 0.0750759;\n            b2 = 0.96900 * b2 + white * 0.1538520;\n            b3 = 0.86650 * b3 + white * 0.3104856;\n            b4 = 0.55000 * b4 + white * 0.5329522;\n            b5 = -0.7616 * b5 - white * 0.0168980;\n            output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n            output[i] *= 0.11;\n            b6 = white * 0.115926;\n          }\n\n          var pinkNoise = audioContext.createBufferSource();\n          pinkNoise.buffer = noiseBuffer;\n          pinkNoise.loop = true;\n          pinkNoise.connect(destination);\n          return pinkNoise;\n        }\n\n        function createBrownianNoise(destination) {\n          var bufferSize = 2 * audioContext.sampleRate,\n              noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate),\n              output = noiseBuffer.getChannelData(0),\n              lastOut = 0.0;\n\n          for (var i = 0; i < bufferSize; i++) {\n            var white = Math.random() * 2 - 1;\n            output[i] = (lastOut + 0.02 * white) / 1.02;\n            lastOut = output[i];\n            output[i] *= 3.5;\n          }\n\n          var brownianNoise = audioContext.createBufferSource();\n          brownianNoise.buffer = noiseBuffer;\n          brownianNoise.loop = true;\n          brownianNoise.connect(destination);\n          return brownianNoise;\n        }\n      }\n    }, {}],\n    4: [function (_dereq_, module, exports) {\n      /**\r\n       * Band.js - Music Composer\r\n       * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n       * time signatures.\r\n       *\r\n       * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n       */\n      module.exports = OscillatorInstrumentPack;\n      /**\r\n       * Oscillator Instrument Pack\r\n       *\r\n       * @param name\r\n       * @param audioContext\r\n       * @returns {{createNote: createNote}}\r\n       * @constructor\r\n       */\n\n      function OscillatorInstrumentPack(name, audioContext) {\n        var types = ['sine', 'square', 'sawtooth', 'triangle'];\n\n        if (types.indexOf(name) === -1) {\n          throw new Error(name + ' is not a valid Oscillator type');\n        }\n\n        return {\n          createNote: function (destination, frequency) {\n            var o = audioContext.createOscillator(); // Connect note to volume\n\n            o.connect(destination); // Set pitch type\n\n            o.type = name; // Set frequency\n\n            o.frequency.value = frequency;\n            return o;\n          }\n        };\n      }\n    }, {}],\n    5: [function (_dereq_, module, exports) {\n      /**\r\n       * Band.js - Music Composer\r\n       * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n       * time signatures.\r\n       *\r\n       * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n       */\n      module.exports = Instrument;\n      /**\r\n       * Instrument Class - Gets instantiated when `Conductor.createInstrument()` is called.\r\n       *\r\n       * @param name\r\n       * @param pack\r\n       * @param conductor\r\n       * @constructor\r\n       */\n\n      function Instrument(name, pack, conductor) {\n        // Default to Sine Oscillator\n        if (!name) {\n          name = 'sine';\n        }\n\n        if (!pack) {\n          pack = 'oscillators';\n        }\n\n        if (typeof conductor.packs.instrument[pack] === 'undefined') {\n          throw new Error(pack + ' is not a currently loaded Instrument Pack.');\n        }\n        /**\r\n         * Helper function to figure out how long a note is\r\n         *\r\n         * @param rhythm\r\n         * @returns {number}\r\n         */\n\n\n        function getDuration(rhythm) {\n          if (typeof conductor.notes[rhythm] === 'undefined') {\n            throw new Error(rhythm + ' is not a correct rhythm.');\n          }\n\n          return conductor.notes[rhythm] * conductor.tempo / conductor.noteGetsBeat * 10;\n        }\n        /**\r\n         * Helper function to clone an object\r\n         *\r\n         * @param obj\r\n         * @returns {copy}\r\n         */\n\n\n        function clone(obj) {\n          if (null === obj || \"object\" != typeof obj) {\n            return obj;\n          }\n\n          var copy = obj.constructor();\n\n          for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) {\n              copy[attr] = obj[attr];\n            }\n          }\n\n          return copy;\n        }\n\n        var instrument = this,\n            lastRepeatCount = 0,\n            volumeLevel = 1,\n            articulationGapPercentage = 0.05;\n        instrument.totalDuration = 0;\n        instrument.bufferPosition = 0;\n        instrument.instrument = conductor.packs.instrument[pack](name, conductor.audioContext);\n        instrument.notes = [];\n        /**\r\n         * Set volume level for an instrument\r\n         *\r\n         * @param newVolumeLevel\r\n         */\n\n        instrument.setVolume = function (newVolumeLevel) {\n          if (newVolumeLevel > 1) {\n            newVolumeLevel = newVolumeLevel / 100;\n          }\n\n          volumeLevel = newVolumeLevel;\n          return instrument;\n        };\n        /**\r\n         * Add a note to an instrument\r\n         * @param rhythm\r\n         * @param [pitch] - Comma separated string if more than one pitch\r\n         * @param [tie]\r\n         */\n\n\n        instrument.note = function (rhythm, pitch, tie) {\n          var duration = getDuration(rhythm),\n              articulationGap = tie ? 0 : duration * articulationGapPercentage;\n\n          if (pitch) {\n            pitch = pitch.split(',');\n            var index = -1;\n\n            while (++index < pitch.length) {\n              var p = pitch[index];\n              p = p.trim();\n\n              if (typeof conductor.pitches[p] === 'undefined') {\n                p = parseFloat(p);\n\n                if (isNaN(p) || p < 0) {\n                  throw new Error(p + ' is not a valid pitch.');\n                }\n              }\n            }\n          }\n\n          instrument.notes.push({\n            rhythm: rhythm,\n            pitch: pitch,\n            duration: duration,\n            articulationGap: articulationGap,\n            tie: tie,\n            startTime: instrument.totalDuration,\n            stopTime: instrument.totalDuration + duration - articulationGap,\n            // Volume needs to be a quarter of the master so it doesn't clip\n            volumeLevel: volumeLevel / 4\n          });\n          instrument.totalDuration += duration;\n          return instrument;\n        };\n        /**\r\n         * Add a rest to an instrument\r\n         *\r\n         * @param rhythm\r\n         */\n\n\n        instrument.rest = function (rhythm) {\n          var duration = getDuration(rhythm);\n          instrument.notes.push({\n            rhythm: rhythm,\n            pitch: false,\n            duration: duration,\n            articulationGap: 0,\n            startTime: instrument.totalDuration,\n            stopTime: instrument.totalDuration + duration\n          });\n          instrument.totalDuration += duration;\n          return instrument;\n        };\n        /**\r\n         * Place where a repeat section should start\r\n         */\n\n\n        instrument.repeatStart = function () {\n          lastRepeatCount = instrument.notes.length;\n          return instrument;\n        };\n        /**\r\n         * Repeat from beginning\r\n         */\n\n\n        instrument.repeatFromBeginning = function (numOfRepeats) {\n          lastRepeatCount = 0;\n          instrument.repeat(numOfRepeats);\n          return instrument;\n        };\n        /**\r\n         * Number of times the section should repeat\r\n         * @param [numOfRepeats] - defaults to 1\r\n         */\n\n\n        instrument.repeat = function (numOfRepeats) {\n          numOfRepeats = typeof numOfRepeats === 'undefined' ? 1 : numOfRepeats;\n          var notesBufferCopy = instrument.notes.slice(lastRepeatCount);\n\n          for (var r = 0; r < numOfRepeats; r++) {\n            var index = -1;\n\n            while (++index < notesBufferCopy.length) {\n              var noteCopy = clone(notesBufferCopy[index]);\n              noteCopy.startTime = instrument.totalDuration;\n              noteCopy.stopTime = instrument.totalDuration + noteCopy.duration - noteCopy.articulationGap;\n              instrument.notes.push(noteCopy);\n              instrument.totalDuration += noteCopy.duration;\n            }\n          }\n\n          return instrument;\n        };\n        /**\r\n         * Reset the duration, start, and stop time of each note.\r\n         */\n\n\n        instrument.resetDuration = function () {\n          var index = -1,\n              numOfNotes = instrument.notes.length;\n          instrument.totalDuration = 0;\n\n          while (++index < numOfNotes) {\n            var note = instrument.notes[index],\n                duration = getDuration(note.rhythm),\n                articulationGap = note.tie ? 0 : duration * articulationGapPercentage;\n            note.duration = getDuration(note.rhythm);\n            note.startTime = instrument.totalDuration;\n            note.stopTime = instrument.totalDuration + duration - articulationGap;\n\n            if (note.pitch !== false) {\n              note.articulationGap = articulationGap;\n            }\n\n            instrument.totalDuration += duration;\n          }\n        };\n      }\n    }, {}],\n    6: [function (_dereq_, module, exports) {\n      /**\r\n       * Band.js - Music Composer\r\n       * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n       * time signatures.\r\n       *\r\n       * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n       */\n\n      /**\r\n       * @type {BandJS}\r\n       */\n      module.exports = _dereq_('./conductor.js');\n      module.exports.loadPack('instrument', 'noises', _dereq_('./instrument-packs/noises.js'));\n      module.exports.loadPack('instrument', 'oscillators', _dereq_('./instrument-packs/oscillators.js'));\n      module.exports.loadPack('rhythm', 'northAmerican', _dereq_('./rhythm-packs/north-american.js'));\n      module.exports.loadPack('rhythm', 'european', _dereq_('./rhythm-packs/european.js'));\n      module.exports.loadPack('tuning', 'equalTemperament', _dereq_('./tuning-packs/equal-temperament.js'));\n    }, {\n      \"./conductor.js\": 2,\n      \"./instrument-packs/noises.js\": 3,\n      \"./instrument-packs/oscillators.js\": 4,\n      \"./rhythm-packs/european.js\": 8,\n      \"./rhythm-packs/north-american.js\": 9,\n      \"./tuning-packs/equal-temperament.js\": 10\n    }],\n    7: [function (_dereq_, module, exports) {\n      /**\r\n       * Band.js - Music Composer\r\n       * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n       * time signatures.\r\n       *\r\n       * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n       */\n      module.exports = Player;\n      /**\r\n       * Player Class - This gets instantiated by the Conductor class when `Conductor.finish()` is called\r\n       *\r\n       * @param conductor\r\n       * @constructor\r\n       */\n\n      function Player(conductor) {\n        var player = this,\n            bufferTimeout,\n            allNotes = bufferNotes(),\n            currentPlayTime,\n            totalPlayTime = 0,\n            faded = false;\n        calculateTotalDuration();\n        /**\r\n         * Helper function to stop all notes and\r\n         * then re-buffers them\r\n         *\r\n         * @param {Boolean} [resetDuration]\r\n         */\n\n        function reset(resetDuration) {\n          // Reset the buffer position of all instruments\n          var index = -1,\n              numOfInstruments = conductor.instruments.length;\n\n          while (++index < numOfInstruments) {\n            var instrument = conductor.instruments[index];\n\n            if (resetDuration) {\n              instrument.resetDuration();\n            }\n\n            instrument.bufferPosition = 0;\n          } // If we are reseting the duration, we need to figure out the new total duration.\n          // Also set the totalPlayTime to the current percentage done of the new total duration.\n\n\n          if (resetDuration) {\n            calculateTotalDuration();\n            totalPlayTime = conductor.percentageComplete * conductor.totalDuration;\n          }\n\n          index = -1;\n\n          while (++index < allNotes.length) {\n            allNotes[index].gain.disconnect();\n          }\n\n          clearTimeout(bufferTimeout);\n          allNotes = bufferNotes();\n        }\n        /**\r\n         * Helper function to fade up/down master volume\r\n         *\r\n         * @param direction - up or down\r\n         * @param [cb] - Callback function fired after the transition is completed\r\n         * @param [resetVolume] - Reset the volume back to it's original level\r\n         */\n\n\n        function fade(direction, cb, resetVolume) {\n          if (typeof resetVolume === 'undefined') {\n            resetVolume = false;\n          }\n\n          if ('up' !== direction && 'down' !== direction) {\n            throw new Error('Direction must be either up or down.');\n          }\n\n          var fadeDuration = 0.2;\n          faded = direction === 'down';\n\n          if (direction === 'up') {\n            conductor.masterVolume.gain.linearRampToValueAtTime(0, conductor.audioContext.currentTime);\n            conductor.masterVolume.gain.linearRampToValueAtTime(conductor.masterVolumeLevel, conductor.audioContext.currentTime + fadeDuration);\n          } else {\n            conductor.masterVolume.gain.linearRampToValueAtTime(conductor.masterVolumeLevel, conductor.audioContext.currentTime);\n            conductor.masterVolume.gain.linearRampToValueAtTime(0, conductor.audioContext.currentTime + fadeDuration);\n          }\n\n          setTimeout(function () {\n            if (typeof cb === 'function') {\n              cb.call(player);\n            }\n\n            if (resetVolume) {\n              faded = !faded;\n              conductor.masterVolume.gain.linearRampToValueAtTime(conductor.masterVolumeLevel, conductor.audioContext.currentTime);\n            }\n          }, fadeDuration * 1000);\n        }\n        /**\r\n         * Calculates the total duration of a song based on the longest duration of all instruments.\r\n         */\n\n\n        function calculateTotalDuration() {\n          var index = -1;\n          var totalDuration = 0;\n\n          while (++index < conductor.instruments.length) {\n            var instrument = conductor.instruments[index];\n\n            if (instrument.totalDuration > totalDuration) {\n              totalDuration = instrument.totalDuration;\n            }\n          }\n\n          conductor.totalDuration = totalDuration;\n        }\n        /**\r\n         * Grabs a set of notes based on the current time and what the Buffer Size is.\r\n         * It will also skip any notes that have a start time less than the\r\n         * total play time.\r\n         *\r\n         * @returns {Array}\r\n         */\n\n\n        function bufferNotes() {\n          var notes = [],\n              index = -1,\n              bufferSize = conductor.noteBufferLength;\n\n          while (++index < conductor.instruments.length) {\n            var instrument = conductor.instruments[index]; // Create volume for this instrument\n\n            var bufferCount = bufferSize;\n            var index2 = -1;\n\n            while (++index2 < bufferCount) {\n              var note = instrument.notes[instrument.bufferPosition + index2];\n\n              if (typeof note === 'undefined') {\n                break;\n              }\n\n              var pitch = note.pitch,\n                  startTime = note.startTime,\n                  stopTime = note.stopTime,\n                  volumeLevel = note.volumeLevel;\n\n              if (stopTime < totalPlayTime) {\n                bufferCount++;\n                continue;\n              } // If pitch is false, then it's a rest and we don't need a note\n\n\n              if (false === pitch) {\n                continue;\n              }\n\n              var gain = conductor.audioContext.createGain(); // Connect volume gain to the Master Volume;\n\n              gain.connect(conductor.masterVolume);\n              gain.gain.value = volumeLevel; // If the startTime is less than total play time, we need to start the note\n              // in the middle\n\n              if (startTime < totalPlayTime) {\n                startTime = stopTime - totalPlayTime;\n              } // No pitches defined\n\n\n              if (typeof pitch === 'undefined') {\n                notes.push({\n                  startTime: startTime < totalPlayTime ? stopTime - totalPlayTime : startTime,\n                  stopTime: stopTime,\n                  node: instrument.instrument.createNote(gain),\n                  gain: gain,\n                  volumeLevel: volumeLevel\n                });\n              } else {\n                var index3 = -1;\n\n                while (++index3 < pitch.length) {\n                  var p = pitch[index3];\n                  notes.push({\n                    startTime: startTime,\n                    stopTime: stopTime,\n                    node: instrument.instrument.createNote(gain, conductor.pitches[p.trim()] || parseFloat(p)),\n                    gain: gain,\n                    volumeLevel: volumeLevel\n                  });\n                }\n              }\n            }\n\n            instrument.bufferPosition += bufferCount;\n          } // Return array of notes\n\n\n          return notes;\n        }\n\n        function totalPlayTimeCalculator() {\n          if (!player.paused && player.playing) {\n            if (conductor.totalDuration < totalPlayTime) {\n              player.stop(false);\n\n              if (player.looping) {\n                player.play();\n              } else {\n                conductor.onFinishedCallback();\n              }\n            } else {\n              updateTotalPlayTime();\n              setTimeout(totalPlayTimeCalculator, 1000 / 60);\n            }\n          }\n        }\n        /**\r\n         * Call to update the total play time so far\r\n         */\n\n\n        function updateTotalPlayTime() {\n          totalPlayTime += conductor.audioContext.currentTime - currentPlayTime;\n          var seconds = Math.round(totalPlayTime);\n\n          if (seconds != conductor.currentSeconds) {\n            // Make callback asynchronous\n            setTimeout(function () {\n              conductor.onTickerCallback(seconds);\n            }, 1);\n            conductor.currentSeconds = seconds;\n          }\n\n          conductor.percentageComplete = totalPlayTime / conductor.totalDuration;\n          currentPlayTime = conductor.audioContext.currentTime;\n        }\n\n        player.paused = false;\n        player.playing = false;\n        player.looping = false;\n        player.muted = false;\n        /**\r\n         * Grabs currently buffered notes and calls their start/stop methods.\r\n         *\r\n         * It then sets up a timer to buffer up the next set of notes based on the\r\n         * a set buffer size.  This will keep going until the song is stopped or paused.\r\n         *\r\n         * It will use the total time played so far as an offset so you pause/play the music\r\n         */\n\n        player.play = function () {\n          player.playing = true;\n          player.paused = false;\n          currentPlayTime = conductor.audioContext.currentTime; // Starts calculator which keeps track of total play time\n\n          totalPlayTimeCalculator();\n\n          var timeOffset = conductor.audioContext.currentTime - totalPlayTime,\n              playNotes = function (notes) {\n            var index = -1;\n\n            while (++index < notes.length) {\n              var note = notes[index];\n              var startTime = note.startTime + timeOffset,\n                  stopTime = note.stopTime + timeOffset;\n              /**\r\n               * If no tie, then we need to introduce a volume ramp up to remove any clipping\r\n               * as Oscillators have an issue with this when playing a note at full volume.\r\n               * We also put in a slight ramp down as well.  This only takes up 1/1000 of a second.\r\n               */\n\n              if (!note.tie) {\n                if (startTime > 0) {\n                  startTime -= 0.001;\n                }\n\n                stopTime += 0.001;\n                note.gain.gain.setValueAtTime(0.0, startTime);\n                note.gain.gain.linearRampToValueAtTime(note.volumeLevel, startTime + 0.001);\n                note.gain.gain.setValueAtTime(note.volumeLevel, stopTime - 0.001);\n                note.gain.gain.linearRampToValueAtTime(0.0, stopTime);\n              }\n\n              note.node.start(startTime);\n              note.node.stop(stopTime);\n            }\n          },\n              bufferUp = function () {\n            bufferTimeout = setTimeout(function bufferInNewNotes() {\n              if (player.playing && !player.paused) {\n                var newNotes = bufferNotes();\n\n                if (newNotes.length > 0) {\n                  playNotes(newNotes);\n                  allNotes = allNotes.concat(newNotes);\n                  bufferUp();\n                }\n              }\n            }, conductor.tempo * 5000);\n          };\n\n          playNotes(allNotes);\n          bufferUp();\n\n          if (faded && !player.muted) {\n            fade('up');\n          }\n        };\n        /**\r\n         * Stop playing all music and rewind the song\r\n         *\r\n         * @param fadeOut boolean - should the song fade out?\r\n         */\n\n\n        player.stop = function (fadeOut) {\n          player.playing = false;\n          conductor.currentSeconds = 0;\n          conductor.percentageComplete = 0;\n\n          if (typeof fadeOut === 'undefined') {\n            fadeOut = true;\n          }\n\n          if (fadeOut && !player.muted) {\n            fade('down', function () {\n              totalPlayTime = 0;\n              reset(); // Make callback asynchronous\n\n              setTimeout(function () {\n                conductor.onTickerCallback(conductor.currentSeconds);\n              }, 1);\n            }, true);\n          } else {\n            totalPlayTime = 0;\n            reset(); // Make callback asynchronous\n\n            setTimeout(function () {\n              conductor.onTickerCallback(conductor.currentSeconds);\n            }, 1);\n          }\n        };\n        /**\r\n         * Pauses the music, resets the notes,\r\n         * and gets the total time played so far\r\n         */\n\n\n        player.pause = function () {\n          player.paused = true;\n          updateTotalPlayTime();\n\n          if (player.muted) {\n            reset();\n          } else {\n            fade('down', function () {\n              reset();\n            });\n          }\n        };\n        /**\r\n         * Set true if you want the song to loop\r\n         *\r\n         * @param val\r\n         */\n\n\n        player.loop = function (val) {\n          player.looping = !!val;\n        };\n        /**\r\n         * Set a specific time that the song should start it.\r\n         * If it's already playing, reset and start the song\r\n         * again so it has a seamless jump.\r\n         *\r\n         * @param newTime\r\n         */\n\n\n        player.setTime = function (newTime) {\n          totalPlayTime = parseInt(newTime);\n          reset();\n\n          if (player.playing && !player.paused) {\n            player.play();\n          }\n        };\n        /**\r\n         * Reset the tempo for a song. This will trigger a\r\n         * duration reset for each instrument as well.\r\n         */\n\n\n        player.resetTempo = function () {\n          reset(true);\n\n          if (player.playing && !player.paused) {\n            player.play();\n          }\n        };\n        /**\r\n         * Mute all of the music\r\n         *\r\n         * @param cb - Callback function called when music has been muted\r\n         */\n\n\n        player.mute = function (cb) {\n          player.muted = true;\n          fade('down', cb);\n        };\n        /**\r\n         * Unmute all of the music\r\n         *\r\n         * @param cb - Callback function called when music has been unmuted\r\n         */\n\n\n        player.unmute = function (cb) {\n          player.muted = false;\n          fade('up', cb);\n        };\n      }\n    }, {}],\n    8: [function (_dereq_, module, exports) {\n      /**\r\n       * Band.js - Music Composer\r\n       * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n       * time signatures.\r\n       *\r\n       * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n       */\n\n      /**\r\n       * European Rhythm Pack\r\n       */\n      module.exports = {\n        semibreve: 1,\n        dottedMinim: 0.75,\n        minim: 0.5,\n        dottedCrotchet: 0.375,\n        tripletMinim: 0.33333334,\n        crotchet: 0.25,\n        dottedQuaver: 0.1875,\n        tripletCrotchet: 0.166666667,\n        quaver: 0.125,\n        dottedSemiquaver: 0.09375,\n        tripletQuaver: 0.083333333,\n        semiquaver: 0.0625,\n        tripletSemiquaver: 0.041666667,\n        demisemiquaver: 0.03125\n      };\n    }, {}],\n    9: [function (_dereq_, module, exports) {\n      /**\r\n       * Band.js - Music Composer\r\n       * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n       * time signatures.\r\n       *\r\n       * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n       */\n\n      /**\r\n       * North American (Canada and USA) Rhythm Pack\r\n       */\n      module.exports = {\n        whole: 1,\n        dottedHalf: 0.75,\n        half: 0.5,\n        dottedQuarter: 0.375,\n        tripletHalf: 0.33333334,\n        quarter: 0.25,\n        dottedEighth: 0.1875,\n        tripletQuarter: 0.166666667,\n        eighth: 0.125,\n        dottedSixteenth: 0.09375,\n        tripletEighth: 0.083333333,\n        sixteenth: 0.0625,\n        tripletSixteenth: 0.041666667,\n        thirtySecond: 0.03125\n      };\n    }, {}],\n    10: [function (_dereq_, module, exports) {\n      /**\r\n       * Band.js - Music Composer\r\n       * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n       * time signatures.\r\n       *\r\n       * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n       */\n\n      /**\r\n       * Equal Temperament Tuning\r\n       * Source: http://www.phy.mtu.edu/~suits/notefreqs.html\r\n       */\n      module.exports = {\n        'C0': 16.35,\n        'C#0': 17.32,\n        'Db0': 17.32,\n        'D0': 18.35,\n        'D#0': 19.45,\n        'Eb0': 19.45,\n        'E0': 20.60,\n        'F0': 21.83,\n        'F#0': 23.12,\n        'Gb0': 23.12,\n        'G0': 24.50,\n        'G#0': 25.96,\n        'Ab0': 25.96,\n        'A0': 27.50,\n        'A#0': 29.14,\n        'Bb0': 29.14,\n        'B0': 30.87,\n        'C1': 32.70,\n        'C#1': 34.65,\n        'Db1': 34.65,\n        'D1': 36.71,\n        'D#1': 38.89,\n        'Eb1': 38.89,\n        'E1': 41.20,\n        'F1': 43.65,\n        'F#1': 46.25,\n        'Gb1': 46.25,\n        'G1': 49.00,\n        'G#1': 51.91,\n        'Ab1': 51.91,\n        'A1': 55.00,\n        'A#1': 58.27,\n        'Bb1': 58.27,\n        'B1': 61.74,\n        'C2': 65.41,\n        'C#2': 69.30,\n        'Db2': 69.30,\n        'D2': 73.42,\n        'D#2': 77.78,\n        'Eb2': 77.78,\n        'E2': 82.41,\n        'F2': 87.31,\n        'F#2': 92.50,\n        'Gb2': 92.50,\n        'G2': 98.00,\n        'G#2': 103.83,\n        'Ab2': 103.83,\n        'A2': 110.00,\n        'A#2': 116.54,\n        'Bb2': 116.54,\n        'B2': 123.47,\n        'C3': 130.81,\n        'C#3': 138.59,\n        'Db3': 138.59,\n        'D3': 146.83,\n        'D#3': 155.56,\n        'Eb3': 155.56,\n        'E3': 164.81,\n        'F3': 174.61,\n        'F#3': 185.00,\n        'Gb3': 185.00,\n        'G3': 196.00,\n        'G#3': 207.65,\n        'Ab3': 207.65,\n        'A3': 220.00,\n        'A#3': 233.08,\n        'Bb3': 233.08,\n        'B3': 246.94,\n        'C4': 261.63,\n        'C#4': 277.18,\n        'Db4': 277.18,\n        'D4': 293.66,\n        'D#4': 311.13,\n        'Eb4': 311.13,\n        'E4': 329.63,\n        'F4': 349.23,\n        'F#4': 369.99,\n        'Gb4': 369.99,\n        'G4': 392.00,\n        'G#4': 415.30,\n        'Ab4': 415.30,\n        'A4': 440.00,\n        'A#4': 466.16,\n        'Bb4': 466.16,\n        'B4': 493.88,\n        'C5': 523.25,\n        'C#5': 554.37,\n        'Db5': 554.37,\n        'D5': 587.33,\n        'D#5': 622.25,\n        'Eb5': 622.25,\n        'E5': 659.26,\n        'F5': 698.46,\n        'F#5': 739.99,\n        'Gb5': 739.99,\n        'G5': 783.99,\n        'G#5': 830.61,\n        'Ab5': 830.61,\n        'A5': 880.00,\n        'A#5': 932.33,\n        'Bb5': 932.33,\n        'B5': 987.77,\n        'C6': 1046.50,\n        'C#6': 1108.73,\n        'Db6': 1108.73,\n        'D6': 1174.66,\n        'D#6': 1244.51,\n        'Eb6': 1244.51,\n        'E6': 1318.51,\n        'F6': 1396.91,\n        'F#6': 1479.98,\n        'Gb6': 1479.98,\n        'G6': 1567.98,\n        'G#6': 1661.22,\n        'Ab6': 1661.22,\n        'A6': 1760.00,\n        'A#6': 1864.66,\n        'Bb6': 1864.66,\n        'B6': 1975.53,\n        'C7': 2093.00,\n        'C#7': 2217.46,\n        'Db7': 2217.46,\n        'D7': 2349.32,\n        'D#7': 2489.02,\n        'Eb7': 2489.02,\n        'E7': 2637.02,\n        'F7': 2793.83,\n        'F#7': 2959.96,\n        'Gb7': 2959.96,\n        'G7': 3135.96,\n        'G#7': 3322.44,\n        'Ab7': 3322.44,\n        'A7': 3520.00,\n        'A#7': 3729.31,\n        'Bb7': 3729.31,\n        'B7': 3951.07,\n        'C8': 4186.01\n      };\n    }, {}]\n  }, {}, [6])(6);\n});","map":{"version":3,"sources":["C:/Users/hillel nagid/Desktop/rhythm/band.js/dist/band.js"],"names":["e","exports","module","define","amd","f","window","global","self","BandJS","t","n","r","s","o","u","a","require","i","Error","call","length","_dereq_","definition","AudioContext","webkitAudioContext","Conductor","packs","instrument","rhythm","tuning","conductor","player","noop","signatureToNoteLengthRatio","pitches","notes","audioContext","masterVolumeLevel","masterVolume","createGain","connect","destination","beatsPerBar","noteGetsBeat","tempo","instruments","totalDuration","currentSeconds","percentageComplete","noteBufferLength","onTickerCallback","onFinishedCallback","onDurationChangeCallback","load","json","destroy","timeSignature","setTimeSignature","setTempo","instrumentList","hasOwnProperty","createInstrument","name","pack","inst","index","note","noteParts","split","rest","type","pitch","tie","finish","Instrument","push","Player","setMasterVolume","volume","gain","setValueAtTime","currentTime","getTotalSeconds","Math","round","setTickerCallback","cb","top","bottom","resetTempo","setOnFinishedCallback","setOnDurationChangeCallback","setNoteBufferLength","len","loadPack","data","indexOf","NoisesInstrumentPack","types","createNote","createWhiteNoise","createPinkNoise","createBrownianNoise","bufferSize","sampleRate","noiseBuffer","createBuffer","output","getChannelData","random","whiteNoise","createBufferSource","buffer","loop","b0","b1","b2","b3","b4","b5","b6","white","pinkNoise","lastOut","brownianNoise","OscillatorInstrumentPack","frequency","createOscillator","value","getDuration","clone","obj","copy","constructor","attr","lastRepeatCount","volumeLevel","articulationGapPercentage","bufferPosition","setVolume","newVolumeLevel","duration","articulationGap","p","trim","parseFloat","isNaN","startTime","stopTime","repeatStart","repeatFromBeginning","numOfRepeats","repeat","notesBufferCopy","slice","noteCopy","resetDuration","numOfNotes","bufferTimeout","allNotes","bufferNotes","currentPlayTime","totalPlayTime","faded","calculateTotalDuration","reset","numOfInstruments","disconnect","clearTimeout","fade","direction","resetVolume","fadeDuration","linearRampToValueAtTime","setTimeout","bufferCount","index2","node","index3","totalPlayTimeCalculator","paused","playing","stop","looping","play","updateTotalPlayTime","seconds","muted","timeOffset","playNotes","start","bufferUp","bufferInNewNotes","newNotes","concat","fadeOut","pause","val","setTime","newTime","parseInt","mute","unmute","semibreve","dottedMinim","minim","dottedCrotchet","tripletMinim","crotchet","dottedQuaver","tripletCrotchet","quaver","dottedSemiquaver","tripletQuaver","semiquaver","tripletSemiquaver","demisemiquaver","whole","dottedHalf","half","dottedQuarter","tripletHalf","quarter","dottedEighth","tripletQuarter","eighth","dottedSixteenth","tripletEighth","sixteenth","tripletSixteenth","thirtySecond"],"mappings":"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","sourcesContent":["!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.BandJS=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\r\n/*\r\n * Web Audio API AudioContext shim\r\n */\r\n(function (definition) {\r\n    if (typeof exports === \"object\") {\r\n        module.exports = definition();\r\n    }\r\n})(function () {\r\n  return window.AudioContext || window.webkitAudioContext;\r\n});\r\n\r\n},{}],2:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\nmodule.exports = Conductor;\r\n\r\nvar packs = {\r\n    instrument: {},\r\n    rhythm: {},\r\n    tuning: {}\r\n};\r\n\r\n/**\r\n * Conductor Class - This gets instantiated when `new BandJS()` is called\r\n *\r\n * @param tuning\r\n * @param rhythm\r\n * @constructor\r\n */\r\nfunction Conductor(tuning, rhythm) {\r\n    if (! tuning) {\r\n        tuning = 'equalTemperament';\r\n    }\r\n\r\n    if (! rhythm) {\r\n        rhythm = 'northAmerican';\r\n    }\r\n\r\n    if (typeof packs.tuning[tuning] === 'undefined') {\r\n        throw new Error(tuning + ' is not a valid tuning pack.');\r\n    }\r\n\r\n    if (typeof packs.rhythm[rhythm] === 'undefined') {\r\n        throw new Error(rhythm + ' is not a valid rhythm pack.');\r\n    }\r\n\r\n    var conductor = this,\r\n        player,\r\n        noop = function() {},\r\n        AudioContext = _dereq_('audiocontext'),\r\n        signatureToNoteLengthRatio = {\r\n            2: 6,\r\n            4: 3,\r\n            8: 4.50\r\n        };\r\n\r\n    conductor.packs = packs;\r\n    conductor.pitches = packs.tuning[tuning];\r\n    conductor.notes = packs.rhythm[rhythm];\r\n    conductor.audioContext = new AudioContext();\r\n    conductor.masterVolumeLevel = null;\r\n    conductor.masterVolume = conductor.audioContext.createGain();\r\n    conductor.masterVolume.connect(conductor.audioContext.destination);\r\n    conductor.beatsPerBar = null;\r\n    conductor.noteGetsBeat = null;\r\n    conductor.tempo = null;\r\n    conductor.instruments = [];\r\n    conductor.totalDuration = 0;\r\n    conductor.currentSeconds = 0;\r\n    conductor.percentageComplete = 0;\r\n    conductor.noteBufferLength = 20;\r\n    conductor.onTickerCallback = noop;\r\n    conductor.onFinishedCallback = noop;\r\n    conductor.onDurationChangeCallback = noop;\r\n\r\n    /**\r\n     * Use JSON to load in a song to be played\r\n     *\r\n     * @param json\r\n     */\r\n    conductor.load = function(json) {\r\n        // Clear out any previous song\r\n        if (conductor.instruments.length > 0) {\r\n            conductor.destroy();\r\n        }\r\n\r\n        if (! json) {\r\n            throw new Error('JSON is required for this method to work.');\r\n        }\r\n        // Need to have at least instruments and notes\r\n        if (typeof json.instruments === 'undefined') {\r\n            throw new Error('You must define at least one instrument');\r\n        }\r\n        if (typeof json.notes === 'undefined') {\r\n            throw new Error('You must define notes for each instrument');\r\n        }\r\n\r\n        // Shall we set a time signature?\r\n        if (typeof json.timeSignature !== 'undefined') {\r\n            conductor.setTimeSignature(json.timeSignature[0], json.timeSignature[1]);\r\n        }\r\n\r\n        // Maybe some tempo?\r\n        if (typeof json.tempo !== 'undefined') {\r\n            conductor.setTempo(json.tempo);\r\n        }\r\n\r\n        // Lets create some instruments\r\n        var instrumentList = {};\r\n        for (var instrument in json.instruments) {\r\n            if (! json.instruments.hasOwnProperty(instrument)) {\r\n                continue;\r\n            }\r\n\r\n            instrumentList[instrument] = conductor.createInstrument(\r\n                json.instruments[instrument].name,\r\n                json.instruments[instrument].pack\r\n            );\r\n        }\r\n\r\n        // Now lets add in each of the notes\r\n        for (var inst in json.notes) {\r\n            if (! json.notes.hasOwnProperty(inst)) {\r\n                continue;\r\n            }\r\n            var index = -1;\r\n            while (++ index < json.notes[inst].length) {\r\n                var note = json.notes[inst][index];\r\n                // Use shorthand if it's a string\r\n                if (typeof note === 'string') {\r\n                    var noteParts = note.split('|');\r\n                    if ('rest' === noteParts[1]) {\r\n                        instrumentList[inst].rest(noteParts[0]);\r\n                    } else {\r\n                        instrumentList[inst].note(noteParts[0], noteParts[1], noteParts[2]);\r\n                    }\r\n                    // Otherwise use longhand\r\n                } else {\r\n                    if ('rest' === note.type) {\r\n                        instrumentList[inst].rest(note.rhythm);\r\n                    } else if ('note' === note.type) {\r\n                        instrumentList[inst].note(note.rhythm, note.pitch, note.tie);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Looks like we are done, lets press it.\r\n        return conductor.finish();\r\n    };\r\n\r\n    /**\r\n     * Create a new instrument\r\n     *\r\n     * @param [name] - defaults to sine\r\n     * @param [pack] - defaults to oscillators\r\n     */\r\n    conductor.createInstrument = function(name, pack) {\r\n        var Instrument = _dereq_('./instrument.js'),\r\n            instrument = new Instrument(name, pack, conductor);\r\n        conductor.instruments.push(instrument);\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Needs to be called after all the instruments have been filled with notes.\r\n     * It will figure out the total duration of the song based on the longest\r\n     * duration out of all the instruments.  It will then pass back the Player Object\r\n     * which is used to control the music (play, stop, pause, loop, volume, tempo)\r\n     *\r\n     * It returns the Player object.\r\n     */\r\n    conductor.finish = function() {\r\n        var Player = _dereq_('./player.js');\r\n        player = new Player(conductor);\r\n\r\n        return player;\r\n    };\r\n\r\n    /**\r\n     * Remove all instruments and recreate AudioContext\r\n     */\r\n    conductor.destroy = function() {\r\n        conductor.audioContext = new AudioContext();\r\n        conductor.instruments.length = 0;\r\n        conductor.masterVolume = conductor.audioContext.createGain();\r\n        conductor.masterVolume.connect(conductor.audioContext.destination);\r\n    };\r\n\r\n    /**\r\n     * Set Master Volume\r\n     */\r\n    conductor.setMasterVolume = function(volume) {\r\n        if (volume > 1) {\r\n            volume = volume / 100;\r\n        }\r\n        conductor.masterVolumeLevel = volume;\r\n        conductor.masterVolume.gain.setValueAtTime(volume, conductor.audioContext.currentTime);\r\n    };\r\n\r\n    /**\r\n     * Grab the total duration of a song\r\n     *\r\n     * @returns {number}\r\n     */\r\n    conductor.getTotalSeconds = function() {\r\n        return Math.round(conductor.totalDuration);\r\n    };\r\n\r\n    /**\r\n     * Sets the ticker callback function. This function will be called\r\n     * every time the current seconds has changed.\r\n     *\r\n     * @param cb function\r\n     */\r\n    conductor.setTickerCallback = function(cb) {\r\n        if (typeof cb !== 'function') {\r\n            throw new Error('Ticker must be a function.');\r\n        }\r\n\r\n        conductor.onTickerCallback = cb;\r\n    };\r\n\r\n    /**\r\n     * Sets the time signature for the music. Just like in notation 4/4 time would be setTimeSignature(4, 4);\r\n     * @param top - Number of beats per bar\r\n     * @param bottom - What note type has the beat\r\n     */\r\n    conductor.setTimeSignature = function(top, bottom) {\r\n        if (typeof signatureToNoteLengthRatio[bottom] === 'undefined') {\r\n            throw new Error('The bottom time signature is not supported.');\r\n        }\r\n\r\n        // Not used at the moment, but will be handy in the future.\r\n        conductor.beatsPerBar = top;\r\n        conductor.noteGetsBeat = signatureToNoteLengthRatio[bottom];\r\n    };\r\n\r\n    /**\r\n     * Sets the tempo\r\n     *\r\n     * @param t\r\n     */\r\n    conductor.setTempo = function(t) {\r\n        conductor.tempo = 60 / t;\r\n\r\n        // If we have a player instance, we need to recalculate duration after resetting the tempo.\r\n        if (player) {\r\n            player.resetTempo();\r\n            conductor.onDurationChangeCallback();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set a callback to fire when the song is finished\r\n     *\r\n     * @param cb\r\n     */\r\n    conductor.setOnFinishedCallback = function(cb) {\r\n        if (typeof cb !== 'function') {\r\n            throw new Error('onFinished callback must be a function.');\r\n        }\r\n\r\n        conductor.onFinishedCallback = cb;\r\n    };\r\n\r\n    /**\r\n     * Set a callback to fire when duration of a song changes\r\n     *\r\n     * @param cb\r\n     */\r\n    conductor.setOnDurationChangeCallback = function(cb) {\r\n        if (typeof cb !== 'function') {\r\n            throw new Error('onDurationChanged callback must be a function.');\r\n        }\r\n\r\n        conductor.onDurationChangeCallback = cb;\r\n    };\r\n\r\n    /**\r\n     * Set the number of notes that are buffered every (tempo / 60 * 5) seconds.\r\n     * It's set to 20 notes by default.\r\n     *\r\n     * **WARNING** The higher this is, the more memory is used and can crash your browser.\r\n     *             If notes are being dropped, you can increase this, but be weary of\r\n     *             used memory.\r\n     *\r\n     * @param {Integer} len\r\n     */\r\n    conductor.setNoteBufferLength = function(len) {\r\n        conductor.noteBufferLength = len;\r\n    };\r\n\r\n    conductor.setMasterVolume(100);\r\n    conductor.setTempo(120);\r\n    conductor.setTimeSignature(4, 4);\r\n}\r\n\r\nConductor.loadPack = function(type, name, data) {\r\n    if (['tuning', 'rhythm', 'instrument'].indexOf(type) === -1) {\r\n        throw new Error(type + ' is not a valid Pack Type.');\r\n    }\r\n\r\n    if (typeof packs[type][name] !== 'undefined') {\r\n        throw new Error('A(n) ' + type + ' pack with the name \"' + name + '\" has already been loaded.');\r\n    }\r\n\r\n    packs[type][name] = data;\r\n};\r\n\r\n},{\"./instrument.js\":5,\"./player.js\":7,\"audiocontext\":1}],3:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\nmodule.exports = NoisesInstrumentPack;\r\n\r\n/**\r\n * Noises Instrument Pack\r\n *\r\n * Adapted from: https://github.com/zacharydenton/noise.js\r\n *\r\n * @param name\r\n * @param audioContext\r\n * @returns {{createNote: createNote}}\r\n * @constructor\r\n */\r\nfunction NoisesInstrumentPack(name, audioContext) {\r\n    var types = [\r\n        'white',\r\n        'pink',\r\n        'brown',\r\n        'brownian',\r\n        'red'\r\n    ];\r\n\r\n    if (types.indexOf(name) === -1) {\r\n        throw new Error(name + ' is not a valid noise sound');\r\n    }\r\n\r\n    return {\r\n        createNote: function(destination) {\r\n            switch (name) {\r\n                case 'white':\r\n                    return createWhiteNoise(destination);\r\n                case 'pink':\r\n                    return createPinkNoise(destination);\r\n                case 'brown':\r\n                case 'brownian':\r\n                case 'red':\r\n                    return createBrownianNoise(destination);\r\n            }\r\n        }\r\n    };\r\n\r\n    function createWhiteNoise(destination) {\r\n        var bufferSize = 2 * audioContext.sampleRate,\r\n            noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate),\r\n            output = noiseBuffer.getChannelData(0);\r\n        for (var i = 0; i < bufferSize; i++) {\r\n            output[i] = Math.random() * 2 - 1;\r\n        }\r\n\r\n        var whiteNoise = audioContext.createBufferSource();\r\n        whiteNoise.buffer = noiseBuffer;\r\n        whiteNoise.loop = true;\r\n\r\n        whiteNoise.connect(destination);\r\n\r\n        return whiteNoise;\r\n    }\r\n\r\n    function createPinkNoise(destination) {\r\n        var bufferSize = 2 * audioContext.sampleRate,\r\n            noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate),\r\n            output = noiseBuffer.getChannelData(0),\r\n            b0, b1, b2, b3, b4, b5, b6;\r\n\r\n        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\r\n        for (var i = 0; i < bufferSize; i++) {\r\n            var white = Math.random() * 2 - 1;\r\n            b0 = 0.99886 * b0 + white * 0.0555179;\r\n            b1 = 0.99332 * b1 + white * 0.0750759;\r\n            b2 = 0.96900 * b2 + white * 0.1538520;\r\n            b3 = 0.86650 * b3 + white * 0.3104856;\r\n            b4 = 0.55000 * b4 + white * 0.5329522;\r\n            b5 = -0.7616 * b5 - white * 0.0168980;\r\n            output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\r\n            output[i] *= 0.11;\r\n            b6 = white * 0.115926;\r\n        }\r\n\r\n        var pinkNoise = audioContext.createBufferSource();\r\n        pinkNoise.buffer = noiseBuffer;\r\n        pinkNoise.loop = true;\r\n\r\n        pinkNoise.connect(destination);\r\n\r\n        return pinkNoise;\r\n    }\r\n\r\n    function createBrownianNoise(destination) {\r\n        var bufferSize = 2 * audioContext.sampleRate,\r\n            noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate),\r\n            output = noiseBuffer.getChannelData(0),\r\n            lastOut = 0.0;\r\n        for (var i = 0; i < bufferSize; i++) {\r\n            var white = Math.random() * 2 - 1;\r\n            output[i] = (lastOut + (0.02 * white)) / 1.02;\r\n            lastOut = output[i];\r\n            output[i] *= 3.5;\r\n        }\r\n\r\n        var brownianNoise = audioContext.createBufferSource();\r\n        brownianNoise.buffer = noiseBuffer;\r\n        brownianNoise.loop = true;\r\n\r\n        brownianNoise.connect(destination);\r\n\r\n        return brownianNoise;\r\n    }\r\n}\r\n\r\n},{}],4:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\nmodule.exports = OscillatorInstrumentPack;\r\n\r\n/**\r\n * Oscillator Instrument Pack\r\n *\r\n * @param name\r\n * @param audioContext\r\n * @returns {{createNote: createNote}}\r\n * @constructor\r\n */\r\nfunction OscillatorInstrumentPack(name, audioContext) {\r\n    var types = ['sine', 'square', 'sawtooth', 'triangle'];\r\n\r\n    if (types.indexOf(name) === -1) {\r\n        throw new Error(name + ' is not a valid Oscillator type');\r\n    }\r\n\r\n    return {\r\n        createNote: function(destination, frequency) {\r\n            var o = audioContext.createOscillator();\r\n\r\n            // Connect note to volume\r\n            o.connect(destination);\r\n            // Set pitch type\r\n            o.type = name;\r\n            // Set frequency\r\n            o.frequency.value = frequency;\r\n\r\n            return o;\r\n        }\r\n    };\r\n}\r\n\r\n},{}],5:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\nmodule.exports = Instrument;\r\n\r\n/**\r\n * Instrument Class - Gets instantiated when `Conductor.createInstrument()` is called.\r\n *\r\n * @param name\r\n * @param pack\r\n * @param conductor\r\n * @constructor\r\n */\r\nfunction Instrument(name, pack, conductor) {\r\n    // Default to Sine Oscillator\r\n    if (! name) {\r\n        name = 'sine';\r\n    }\r\n    if (! pack) {\r\n        pack = 'oscillators';\r\n    }\r\n\r\n    if (typeof conductor.packs.instrument[pack] === 'undefined') {\r\n        throw new Error(pack + ' is not a currently loaded Instrument Pack.');\r\n    }\r\n\r\n    /**\r\n     * Helper function to figure out how long a note is\r\n     *\r\n     * @param rhythm\r\n     * @returns {number}\r\n     */\r\n    function getDuration(rhythm) {\r\n        if (typeof conductor.notes[rhythm] === 'undefined') {\r\n            throw new Error(rhythm + ' is not a correct rhythm.');\r\n        }\r\n\r\n        return conductor.notes[rhythm] * conductor.tempo / conductor.noteGetsBeat * 10;\r\n    }\r\n\r\n    /**\r\n     * Helper function to clone an object\r\n     *\r\n     * @param obj\r\n     * @returns {copy}\r\n     */\r\n    function clone(obj) {\r\n        if (null === obj || \"object\" != typeof obj) {\r\n            return obj;\r\n        }\r\n        var copy = obj.constructor();\r\n        for (var attr in obj) {\r\n            if (obj.hasOwnProperty(attr)) {\r\n                copy[attr] = obj[attr];\r\n            }\r\n        }\r\n\r\n        return copy;\r\n    }\r\n\r\n    \r\n    var instrument = this,\r\n        lastRepeatCount = 0,\r\n        volumeLevel = 1,\r\n        articulationGapPercentage = 0.05;\r\n\r\n    instrument.totalDuration = 0;\r\n    instrument.bufferPosition = 0;\r\n    instrument.instrument = conductor.packs.instrument[pack](name, conductor.audioContext);\r\n    instrument.notes = [];\r\n    \r\n    /**\r\n     * Set volume level for an instrument\r\n     *\r\n     * @param newVolumeLevel\r\n     */\r\n    instrument.setVolume = function(newVolumeLevel) {\r\n        if (newVolumeLevel > 1) {\r\n            newVolumeLevel = newVolumeLevel / 100;\r\n        }\r\n        volumeLevel = newVolumeLevel;\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Add a note to an instrument\r\n     * @param rhythm\r\n     * @param [pitch] - Comma separated string if more than one pitch\r\n     * @param [tie]\r\n     */\r\n    instrument.note = function(rhythm, pitch, tie) {\r\n        var duration = getDuration(rhythm),\r\n            articulationGap = tie ? 0 : duration * articulationGapPercentage;\r\n\r\n        if (pitch) {\r\n            pitch = pitch.split(',');\r\n            var index = -1;\r\n            while (++ index < pitch.length) {\r\n                var p = pitch[index];\r\n                p = p.trim();\r\n                if (typeof conductor.pitches[p] === 'undefined') {\r\n                    p = parseFloat(p);\r\n                    if (isNaN(p) || p < 0) {\r\n                        throw new Error(p + ' is not a valid pitch.');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        instrument.notes.push({\r\n            rhythm: rhythm,\r\n            pitch: pitch,\r\n            duration: duration,\r\n            articulationGap: articulationGap,\r\n            tie: tie,\r\n            startTime: instrument.totalDuration,\r\n            stopTime: instrument.totalDuration + duration - articulationGap,\r\n            // Volume needs to be a quarter of the master so it doesn't clip\r\n            volumeLevel: volumeLevel / 4\r\n        });\r\n\r\n        instrument.totalDuration += duration;\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Add a rest to an instrument\r\n     *\r\n     * @param rhythm\r\n     */\r\n    instrument.rest = function(rhythm) {\r\n        var duration = getDuration(rhythm);\r\n\r\n        instrument.notes.push({\r\n            rhythm: rhythm,\r\n            pitch: false,\r\n            duration: duration,\r\n            articulationGap: 0,\r\n            startTime: instrument.totalDuration,\r\n            stopTime: instrument.totalDuration + duration\r\n        });\r\n\r\n        instrument.totalDuration += duration;\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Place where a repeat section should start\r\n     */\r\n    instrument.repeatStart = function() {\r\n        lastRepeatCount = instrument.notes.length;\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Repeat from beginning\r\n     */\r\n    instrument.repeatFromBeginning = function(numOfRepeats) {\r\n        lastRepeatCount = 0;\r\n        instrument.repeat(numOfRepeats);\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Number of times the section should repeat\r\n     * @param [numOfRepeats] - defaults to 1\r\n     */\r\n    instrument.repeat = function(numOfRepeats) {\r\n        numOfRepeats = typeof numOfRepeats === 'undefined' ? 1 : numOfRepeats;\r\n        var notesBufferCopy = instrument.notes.slice(lastRepeatCount);\r\n        for (var r = 0; r < numOfRepeats; r ++) {\r\n            var index = -1;\r\n            while (++index < notesBufferCopy.length) {\r\n                var noteCopy = clone(notesBufferCopy[index]);\r\n\r\n                noteCopy.startTime = instrument.totalDuration;\r\n                noteCopy.stopTime = instrument.totalDuration + noteCopy.duration - noteCopy.articulationGap;\r\n\r\n                instrument.notes.push(noteCopy);\r\n                instrument.totalDuration += noteCopy.duration;\r\n            }\r\n        }\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Reset the duration, start, and stop time of each note.\r\n     */\r\n    instrument.resetDuration = function() {\r\n        var index = -1,\r\n            numOfNotes = instrument.notes.length;\r\n\r\n        instrument.totalDuration = 0;\r\n\r\n        while (++index < numOfNotes) {\r\n            var note = instrument.notes[index],\r\n                duration = getDuration(note.rhythm),\r\n                articulationGap = note.tie ? 0 : duration * articulationGapPercentage;\r\n\r\n            note.duration = getDuration(note.rhythm);\r\n            note.startTime = instrument.totalDuration;\r\n            note.stopTime = instrument.totalDuration + duration - articulationGap;\r\n\r\n            if (note.pitch !== false) {\r\n                note.articulationGap = articulationGap;\r\n            }\r\n\r\n            instrument.totalDuration += duration;\r\n        }\r\n    };\r\n}\r\n\r\n},{}],6:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\n\r\n/**\r\n * @type {BandJS}\r\n */\r\nmodule.exports = _dereq_('./conductor.js');\r\n\r\nmodule.exports.loadPack('instrument', 'noises', _dereq_('./instrument-packs/noises.js'));\r\nmodule.exports.loadPack('instrument', 'oscillators', _dereq_('./instrument-packs/oscillators.js'));\r\nmodule.exports.loadPack('rhythm', 'northAmerican', _dereq_('./rhythm-packs/north-american.js'));\r\nmodule.exports.loadPack('rhythm', 'european', _dereq_('./rhythm-packs/european.js'));\r\nmodule.exports.loadPack('tuning', 'equalTemperament', _dereq_('./tuning-packs/equal-temperament.js'));\r\n\r\n},{\"./conductor.js\":2,\"./instrument-packs/noises.js\":3,\"./instrument-packs/oscillators.js\":4,\"./rhythm-packs/european.js\":8,\"./rhythm-packs/north-american.js\":9,\"./tuning-packs/equal-temperament.js\":10}],7:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\nmodule.exports = Player;\r\n\r\n/**\r\n * Player Class - This gets instantiated by the Conductor class when `Conductor.finish()` is called\r\n *\r\n * @param conductor\r\n * @constructor\r\n */\r\nfunction Player(conductor) {\r\n    var player = this,\r\n        bufferTimeout,\r\n        allNotes = bufferNotes(),\r\n        currentPlayTime,\r\n        totalPlayTime = 0,\r\n        faded = false;\r\n\r\n    calculateTotalDuration();\r\n\r\n    /**\r\n     * Helper function to stop all notes and\r\n     * then re-buffers them\r\n     *\r\n     * @param {Boolean} [resetDuration]\r\n     */\r\n    function reset(resetDuration) {\r\n        // Reset the buffer position of all instruments\r\n        var index = -1,\r\n            numOfInstruments = conductor.instruments.length;\r\n        while (++index < numOfInstruments) {\r\n            var instrument = conductor.instruments[index];\r\n\r\n            if (resetDuration) {\r\n                instrument.resetDuration();\r\n            }\r\n            instrument.bufferPosition = 0;\r\n        }\r\n\r\n        // If we are reseting the duration, we need to figure out the new total duration.\r\n        // Also set the totalPlayTime to the current percentage done of the new total duration.\r\n        if (resetDuration) {\r\n            calculateTotalDuration();\r\n            totalPlayTime = conductor.percentageComplete * conductor.totalDuration;\r\n        }\r\n\r\n        index = -1;\r\n        while (++index < allNotes.length) {\r\n            allNotes[index].gain.disconnect();\r\n        }\r\n\r\n        clearTimeout(bufferTimeout);\r\n\r\n        allNotes = bufferNotes();\r\n    }\r\n\r\n    /**\r\n     * Helper function to fade up/down master volume\r\n     *\r\n     * @param direction - up or down\r\n     * @param [cb] - Callback function fired after the transition is completed\r\n     * @param [resetVolume] - Reset the volume back to it's original level\r\n     */\r\n    function fade(direction, cb, resetVolume) {\r\n        if (typeof resetVolume === 'undefined') {\r\n            resetVolume = false;\r\n        }\r\n        if ('up' !== direction && 'down' !== direction) {\r\n            throw new Error('Direction must be either up or down.');\r\n        }\r\n\r\n        var fadeDuration = 0.2;\r\n\r\n        faded = direction === 'down';\r\n\r\n        if (direction === 'up') {\r\n            conductor.masterVolume.gain.linearRampToValueAtTime(0, conductor.audioContext.currentTime);\r\n            conductor.masterVolume.gain.linearRampToValueAtTime(conductor.masterVolumeLevel, conductor.audioContext.currentTime + fadeDuration);\r\n        } else {\r\n            conductor.masterVolume.gain.linearRampToValueAtTime(conductor.masterVolumeLevel, conductor.audioContext.currentTime);\r\n            conductor.masterVolume.gain.linearRampToValueAtTime(0, conductor.audioContext.currentTime + fadeDuration);\r\n        }\r\n\r\n        setTimeout(function() {\r\n            if (typeof cb === 'function') {\r\n                cb.call(player);\r\n            }\r\n\r\n            if (resetVolume) {\r\n                faded = ! faded;\r\n                conductor.masterVolume.gain.linearRampToValueAtTime(conductor.masterVolumeLevel, conductor.audioContext.currentTime);\r\n            }\r\n        }, fadeDuration * 1000);\r\n    }\r\n\r\n    /**\r\n     * Calculates the total duration of a song based on the longest duration of all instruments.\r\n     */\r\n    function calculateTotalDuration() {\r\n        var index = -1;\r\n        var totalDuration = 0;\r\n        while (++index < conductor.instruments.length) {\r\n            var instrument = conductor.instruments[index];\r\n            if (instrument.totalDuration > totalDuration) {\r\n                totalDuration = instrument.totalDuration;\r\n            }\r\n        }\r\n\r\n        conductor.totalDuration = totalDuration;\r\n    }\r\n\r\n    /**\r\n     * Grabs a set of notes based on the current time and what the Buffer Size is.\r\n     * It will also skip any notes that have a start time less than the\r\n     * total play time.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    function bufferNotes() {\r\n        var notes = [],\r\n            index = -1,\r\n            bufferSize = conductor.noteBufferLength;\r\n\r\n        while (++index < conductor.instruments.length) {\r\n            var instrument = conductor.instruments[index];\r\n            // Create volume for this instrument\r\n            var bufferCount = bufferSize;\r\n            var index2 = -1;\r\n            while (++index2 < bufferCount) {\r\n                var note = instrument.notes[instrument.bufferPosition + index2];\r\n\r\n                if (typeof note === 'undefined') {\r\n                    break;\r\n                }\r\n\r\n                var pitch = note.pitch,\r\n                    startTime = note.startTime,\r\n                    stopTime = note.stopTime,\r\n                    volumeLevel = note.volumeLevel;\r\n\r\n                if (stopTime < totalPlayTime) {\r\n                    bufferCount ++;\r\n                    continue;\r\n                }\r\n\r\n                // If pitch is false, then it's a rest and we don't need a note\r\n                if (false === pitch) {\r\n                    continue;\r\n                }\r\n\r\n                var gain = conductor.audioContext.createGain();\r\n                // Connect volume gain to the Master Volume;\r\n                gain.connect(conductor.masterVolume);\r\n                gain.gain.value = volumeLevel;\r\n\r\n                // If the startTime is less than total play time, we need to start the note\r\n                // in the middle\r\n                if (startTime < totalPlayTime) {\r\n                    startTime = stopTime - totalPlayTime;\r\n                }\r\n\r\n                // No pitches defined\r\n                if (typeof pitch === 'undefined') {\r\n                    notes.push({\r\n                        startTime: startTime < totalPlayTime ? stopTime - totalPlayTime : startTime,\r\n                        stopTime: stopTime,\r\n                        node: instrument.instrument.createNote(gain),\r\n                        gain: gain,\r\n                        volumeLevel: volumeLevel\r\n                    });\r\n                } else {\r\n                    var index3 = -1;\r\n                    while (++index3 < pitch.length) {\r\n                        var p = pitch[index3];\r\n                        notes.push({\r\n                            startTime: startTime,\r\n                            stopTime: stopTime,\r\n                            node: instrument.instrument.createNote(gain, conductor.pitches[p.trim()] || parseFloat(p)),\r\n                            gain: gain,\r\n                            volumeLevel: volumeLevel\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            instrument.bufferPosition += bufferCount;\r\n        }\r\n\r\n        // Return array of notes\r\n        return notes;\r\n    }\r\n\r\n    function totalPlayTimeCalculator() {\r\n        if (! player.paused && player.playing) {\r\n            if (conductor.totalDuration < totalPlayTime) {\r\n                player.stop(false);\r\n                if (player.looping) {\r\n                    player.play();\r\n                } else  {\r\n                    conductor.onFinishedCallback();\r\n                }\r\n            } else {\r\n                updateTotalPlayTime();\r\n                setTimeout(totalPlayTimeCalculator, 1000 / 60);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Call to update the total play time so far\r\n     */\r\n    function updateTotalPlayTime() {\r\n        totalPlayTime += conductor.audioContext.currentTime - currentPlayTime;\r\n        var seconds = Math.round(totalPlayTime);\r\n        if (seconds != conductor.currentSeconds) {\r\n            // Make callback asynchronous\r\n            setTimeout(function() {\r\n                conductor.onTickerCallback(seconds);\r\n            }, 1);\r\n            conductor.currentSeconds = seconds;\r\n        }\r\n        conductor.percentageComplete = totalPlayTime / conductor.totalDuration;\r\n        currentPlayTime = conductor.audioContext.currentTime;\r\n    }\r\n\r\n    player.paused = false;\r\n    player.playing = false;\r\n    player.looping = false;\r\n    player.muted = false;\r\n    \r\n    /**\r\n     * Grabs currently buffered notes and calls their start/stop methods.\r\n     *\r\n     * It then sets up a timer to buffer up the next set of notes based on the\r\n     * a set buffer size.  This will keep going until the song is stopped or paused.\r\n     *\r\n     * It will use the total time played so far as an offset so you pause/play the music\r\n     */\r\n    player.play = function() {\r\n        player.playing = true;\r\n        player.paused = false;\r\n        currentPlayTime = conductor.audioContext.currentTime;\r\n        // Starts calculator which keeps track of total play time\r\n        totalPlayTimeCalculator();\r\n        var timeOffset = conductor.audioContext.currentTime - totalPlayTime,\r\n            playNotes = function(notes) {\r\n                var index = -1;\r\n                while (++index < notes.length) {\r\n                    var note = notes[index];\r\n                    var startTime = note.startTime + timeOffset,\r\n                        stopTime = note.stopTime + timeOffset;\r\n\r\n                    /**\r\n                     * If no tie, then we need to introduce a volume ramp up to remove any clipping\r\n                     * as Oscillators have an issue with this when playing a note at full volume.\r\n                     * We also put in a slight ramp down as well.  This only takes up 1/1000 of a second.\r\n                     */\r\n                    if (! note.tie) {\r\n                        if (startTime > 0) {\r\n                            startTime -= 0.001;\r\n                        }\r\n                        stopTime += 0.001;\r\n                        note.gain.gain.setValueAtTime(0.0, startTime);\r\n                        note.gain.gain.linearRampToValueAtTime(note.volumeLevel, startTime + 0.001);\r\n                        note.gain.gain.setValueAtTime(note.volumeLevel, stopTime - 0.001);\r\n                        note.gain.gain.linearRampToValueAtTime(0.0, stopTime);\r\n                    }\r\n\r\n                    note.node.start(startTime);\r\n                    note.node.stop(stopTime);\r\n                }\r\n            },\r\n            bufferUp = function() {\r\n                bufferTimeout = setTimeout(function bufferInNewNotes() {\r\n                    if (player.playing && ! player.paused) {\r\n                        var newNotes = bufferNotes();\r\n                        if (newNotes.length > 0) {\r\n                            playNotes(newNotes);\r\n                            allNotes = allNotes.concat(newNotes);\r\n                            bufferUp();\r\n                        }\r\n                    }\r\n                }, conductor.tempo * 5000);\r\n            };\r\n\r\n        playNotes(allNotes);\r\n        bufferUp();\r\n\r\n        if (faded && ! player.muted) {\r\n            fade('up');\r\n        }\r\n    };\r\n    /**\r\n     * Stop playing all music and rewind the song\r\n     *\r\n     * @param fadeOut boolean - should the song fade out?\r\n     */\r\n    player.stop = function(fadeOut) {\r\n        player.playing = false;\r\n        conductor.currentSeconds = 0;\r\n        conductor.percentageComplete = 0;\r\n\r\n        if (typeof fadeOut === 'undefined') {\r\n            fadeOut = true;\r\n        }\r\n        if (fadeOut && ! player.muted) {\r\n            fade('down', function() {\r\n                totalPlayTime = 0;\r\n                reset();\r\n                // Make callback asynchronous\r\n                setTimeout(function() {\r\n                    conductor.onTickerCallback(conductor.currentSeconds);\r\n                }, 1);\r\n            }, true);\r\n        } else {\r\n            totalPlayTime = 0;\r\n            reset();\r\n            // Make callback asynchronous\r\n            setTimeout(function() {\r\n                conductor.onTickerCallback(conductor.currentSeconds);\r\n            }, 1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Pauses the music, resets the notes,\r\n     * and gets the total time played so far\r\n     */\r\n    player.pause = function() {\r\n        player.paused = true;\r\n        updateTotalPlayTime();\r\n        if (player.muted) {\r\n            reset();\r\n        } else {\r\n            fade('down', function() {\r\n                reset();\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set true if you want the song to loop\r\n     *\r\n     * @param val\r\n     */\r\n    player.loop = function(val) {\r\n        player.looping = !! val;\r\n    };\r\n\r\n    /**\r\n     * Set a specific time that the song should start it.\r\n     * If it's already playing, reset and start the song\r\n     * again so it has a seamless jump.\r\n     *\r\n     * @param newTime\r\n     */\r\n    player.setTime = function(newTime) {\r\n        totalPlayTime = parseInt(newTime);\r\n        reset();\r\n        if (player.playing && ! player.paused) {\r\n            player.play();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset the tempo for a song. This will trigger a\r\n     * duration reset for each instrument as well.\r\n     */\r\n    player.resetTempo = function() {\r\n        reset(true);\r\n        if (player.playing && ! player.paused) {\r\n            player.play();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Mute all of the music\r\n     *\r\n     * @param cb - Callback function called when music has been muted\r\n     */\r\n    player.mute = function(cb) {\r\n        player.muted = true;\r\n        fade('down', cb);\r\n    };\r\n\r\n    /**\r\n     * Unmute all of the music\r\n     *\r\n     * @param cb - Callback function called when music has been unmuted\r\n     */\r\n    player.unmute = function(cb) {\r\n        player.muted = false;\r\n        fade('up', cb);\r\n    };\r\n}\r\n\r\n},{}],8:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\n\r\n/**\r\n * European Rhythm Pack\r\n */\r\nmodule.exports = {\r\n    semibreve: 1,\r\n    dottedMinim: 0.75,\r\n    minim: 0.5,\r\n    dottedCrotchet: 0.375,\r\n    tripletMinim: 0.33333334,\r\n    crotchet: 0.25,\r\n    dottedQuaver: 0.1875,\r\n    tripletCrotchet: 0.166666667,\r\n    quaver: 0.125,\r\n    dottedSemiquaver: 0.09375,\r\n    tripletQuaver: 0.083333333,\r\n    semiquaver: 0.0625,\r\n    tripletSemiquaver: 0.041666667,\r\n    demisemiquaver: 0.03125\r\n};\r\n\r\n},{}],9:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\n\r\n/**\r\n * North American (Canada and USA) Rhythm Pack\r\n */\r\nmodule.exports = {\r\n    whole: 1,\r\n    dottedHalf: 0.75,\r\n    half: 0.5,\r\n    dottedQuarter: 0.375,\r\n    tripletHalf: 0.33333334,\r\n    quarter: 0.25,\r\n    dottedEighth: 0.1875,\r\n    tripletQuarter: 0.166666667,\r\n    eighth: 0.125,\r\n    dottedSixteenth: 0.09375,\r\n    tripletEighth: 0.083333333,\r\n    sixteenth: 0.0625,\r\n    tripletSixteenth: 0.041666667,\r\n    thirtySecond: 0.03125\r\n};\r\n\r\n},{}],10:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\n\r\n/**\r\n * Equal Temperament Tuning\r\n * Source: http://www.phy.mtu.edu/~suits/notefreqs.html\r\n */\r\nmodule.exports = {\r\n    'C0': 16.35,\r\n    'C#0': 17.32,\r\n    'Db0': 17.32,\r\n    'D0': 18.35,\r\n    'D#0': 19.45,\r\n    'Eb0': 19.45,\r\n    'E0': 20.60,\r\n    'F0': 21.83,\r\n    'F#0': 23.12,\r\n    'Gb0': 23.12,\r\n    'G0': 24.50,\r\n    'G#0': 25.96,\r\n    'Ab0': 25.96,\r\n    'A0': 27.50,\r\n    'A#0': 29.14,\r\n    'Bb0': 29.14,\r\n    'B0': 30.87,\r\n    'C1': 32.70,\r\n    'C#1': 34.65,\r\n    'Db1': 34.65,\r\n    'D1': 36.71,\r\n    'D#1': 38.89,\r\n    'Eb1': 38.89,\r\n    'E1': 41.20,\r\n    'F1': 43.65,\r\n    'F#1': 46.25,\r\n    'Gb1': 46.25,\r\n    'G1': 49.00,\r\n    'G#1': 51.91,\r\n    'Ab1': 51.91,\r\n    'A1': 55.00,\r\n    'A#1': 58.27,\r\n    'Bb1': 58.27,\r\n    'B1': 61.74,\r\n    'C2': 65.41,\r\n    'C#2': 69.30,\r\n    'Db2': 69.30,\r\n    'D2': 73.42,\r\n    'D#2': 77.78,\r\n    'Eb2': 77.78,\r\n    'E2': 82.41,\r\n    'F2': 87.31,\r\n    'F#2': 92.50,\r\n    'Gb2': 92.50,\r\n    'G2': 98.00,\r\n    'G#2': 103.83,\r\n    'Ab2': 103.83,\r\n    'A2': 110.00,\r\n    'A#2': 116.54,\r\n    'Bb2': 116.54,\r\n    'B2': 123.47,\r\n    'C3': 130.81,\r\n    'C#3': 138.59,\r\n    'Db3': 138.59,\r\n    'D3': 146.83,\r\n    'D#3': 155.56,\r\n    'Eb3': 155.56,\r\n    'E3': 164.81,\r\n    'F3': 174.61,\r\n    'F#3': 185.00,\r\n    'Gb3': 185.00,\r\n    'G3': 196.00,\r\n    'G#3': 207.65,\r\n    'Ab3': 207.65,\r\n    'A3': 220.00,\r\n    'A#3': 233.08,\r\n    'Bb3': 233.08,\r\n    'B3': 246.94,\r\n    'C4': 261.63,\r\n    'C#4': 277.18,\r\n    'Db4': 277.18,\r\n    'D4': 293.66,\r\n    'D#4': 311.13,\r\n    'Eb4': 311.13,\r\n    'E4': 329.63,\r\n    'F4': 349.23,\r\n    'F#4': 369.99,\r\n    'Gb4': 369.99,\r\n    'G4': 392.00,\r\n    'G#4': 415.30,\r\n    'Ab4': 415.30,\r\n    'A4': 440.00,\r\n    'A#4': 466.16,\r\n    'Bb4': 466.16,\r\n    'B4': 493.88,\r\n    'C5': 523.25,\r\n    'C#5': 554.37,\r\n    'Db5': 554.37,\r\n    'D5': 587.33,\r\n    'D#5': 622.25,\r\n    'Eb5': 622.25,\r\n    'E5': 659.26,\r\n    'F5': 698.46,\r\n    'F#5': 739.99,\r\n    'Gb5': 739.99,\r\n    'G5': 783.99,\r\n    'G#5': 830.61,\r\n    'Ab5': 830.61,\r\n    'A5': 880.00,\r\n    'A#5': 932.33,\r\n    'Bb5': 932.33,\r\n    'B5': 987.77,\r\n    'C6': 1046.50,\r\n    'C#6': 1108.73,\r\n    'Db6': 1108.73,\r\n    'D6': 1174.66,\r\n    'D#6': 1244.51,\r\n    'Eb6': 1244.51,\r\n    'E6': 1318.51,\r\n    'F6': 1396.91,\r\n    'F#6': 1479.98,\r\n    'Gb6': 1479.98,\r\n    'G6': 1567.98,\r\n    'G#6': 1661.22,\r\n    'Ab6': 1661.22,\r\n    'A6': 1760.00,\r\n    'A#6': 1864.66,\r\n    'Bb6': 1864.66,\r\n    'B6': 1975.53,\r\n    'C7': 2093.00,\r\n    'C#7': 2217.46,\r\n    'Db7': 2217.46,\r\n    'D7': 2349.32,\r\n    'D#7': 2489.02,\r\n    'Eb7': 2489.02,\r\n    'E7': 2637.02,\r\n    'F7': 2793.83,\r\n    'F#7': 2959.96,\r\n    'Gb7': 2959.96,\r\n    'G7': 3135.96,\r\n    'G#7': 3322.44,\r\n    'Ab7': 3322.44,\r\n    'A7': 3520.00,\r\n    'A#7': 3729.31,\r\n    'Bb7': 3729.31,\r\n    'B7': 3951.07,\r\n    'C8': 4186.01\r\n};\r\n\r\n},{}]},{},[6])\r\n(6)\r\n});"]},"metadata":{},"sourceType":"script"}
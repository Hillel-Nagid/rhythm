{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./band.js/dist/band.js","webpack:///./pages/Audio.js","webpack:///./pages/TracksResults.js","webpack:///./pages/index.js","webpack:///./pages/rhythm.js","webpack:///external \"axios\"","webpack:///external \"react\"","webpack:///external \"styled-jsx/style\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.BandJS=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\r\n/*\r\n * Web Audio API AudioContext shim\r\n */\r\n(function (definition) {\r\n    if (typeof exports === \"object\") {\r\n        module.exports = definition();\r\n    }\r\n})(function () {\r\n  return window.AudioContext || window.webkitAudioContext;\r\n});\r\n\r\n},{}],2:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\nmodule.exports = Conductor;\r\n\r\nvar packs = {\r\n    instrument: {},\r\n    rhythm: {},\r\n    tuning: {}\r\n};\r\n\r\n/**\r\n * Conductor Class - This gets instantiated when `new BandJS()` is called\r\n *\r\n * @param tuning\r\n * @param rhythm\r\n * @constructor\r\n */\r\nfunction Conductor(tuning, rhythm) {\r\n    if (! tuning) {\r\n        tuning = 'equalTemperament';\r\n    }\r\n\r\n    if (! rhythm) {\r\n        rhythm = 'northAmerican';\r\n    }\r\n\r\n    if (typeof packs.tuning[tuning] === 'undefined') {\r\n        throw new Error(tuning + ' is not a valid tuning pack.');\r\n    }\r\n\r\n    if (typeof packs.rhythm[rhythm] === 'undefined') {\r\n        throw new Error(rhythm + ' is not a valid rhythm pack.');\r\n    }\r\n\r\n    var conductor = this,\r\n        player,\r\n        noop = function() {},\r\n        AudioContext = _dereq_('audiocontext'),\r\n        signatureToNoteLengthRatio = {\r\n            2: 6,\r\n            4: 3,\r\n            8: 4.50\r\n        };\r\n\r\n    conductor.packs = packs;\r\n    conductor.pitches = packs.tuning[tuning];\r\n    conductor.notes = packs.rhythm[rhythm];\r\n    conductor.audioContext = new AudioContext();\r\n    conductor.masterVolumeLevel = null;\r\n    conductor.masterVolume = conductor.audioContext.createGain();\r\n    conductor.masterVolume.connect(conductor.audioContext.destination);\r\n    conductor.beatsPerBar = null;\r\n    conductor.noteGetsBeat = null;\r\n    conductor.tempo = null;\r\n    conductor.instruments = [];\r\n    conductor.totalDuration = 0;\r\n    conductor.currentSeconds = 0;\r\n    conductor.percentageComplete = 0;\r\n    conductor.noteBufferLength = 20;\r\n    conductor.onTickerCallback = noop;\r\n    conductor.onFinishedCallback = noop;\r\n    conductor.onDurationChangeCallback = noop;\r\n\r\n    /**\r\n     * Use JSON to load in a song to be played\r\n     *\r\n     * @param json\r\n     */\r\n    conductor.load = function(json) {\r\n        // Clear out any previous song\r\n        if (conductor.instruments.length > 0) {\r\n            conductor.destroy();\r\n        }\r\n\r\n        if (! json) {\r\n            throw new Error('JSON is required for this method to work.');\r\n        }\r\n        // Need to have at least instruments and notes\r\n        if (typeof json.instruments === 'undefined') {\r\n            throw new Error('You must define at least one instrument');\r\n        }\r\n        if (typeof json.notes === 'undefined') {\r\n            throw new Error('You must define notes for each instrument');\r\n        }\r\n\r\n        // Shall we set a time signature?\r\n        if (typeof json.timeSignature !== 'undefined') {\r\n            conductor.setTimeSignature(json.timeSignature[0], json.timeSignature[1]);\r\n        }\r\n\r\n        // Maybe some tempo?\r\n        if (typeof json.tempo !== 'undefined') {\r\n            conductor.setTempo(json.tempo);\r\n        }\r\n\r\n        // Lets create some instruments\r\n        var instrumentList = {};\r\n        for (var instrument in json.instruments) {\r\n            if (! json.instruments.hasOwnProperty(instrument)) {\r\n                continue;\r\n            }\r\n\r\n            instrumentList[instrument] = conductor.createInstrument(\r\n                json.instruments[instrument].name,\r\n                json.instruments[instrument].pack\r\n            );\r\n        }\r\n\r\n        // Now lets add in each of the notes\r\n        for (var inst in json.notes) {\r\n            if (! json.notes.hasOwnProperty(inst)) {\r\n                continue;\r\n            }\r\n            var index = -1;\r\n            while (++ index < json.notes[inst].length) {\r\n                var note = json.notes[inst][index];\r\n                // Use shorthand if it's a string\r\n                if (typeof note === 'string') {\r\n                    var noteParts = note.split('|');\r\n                    if ('rest' === noteParts[1]) {\r\n                        instrumentList[inst].rest(noteParts[0]);\r\n                    } else {\r\n                        instrumentList[inst].note(noteParts[0], noteParts[1], noteParts[2]);\r\n                    }\r\n                    // Otherwise use longhand\r\n                } else {\r\n                    if ('rest' === note.type) {\r\n                        instrumentList[inst].rest(note.rhythm);\r\n                    } else if ('note' === note.type) {\r\n                        instrumentList[inst].note(note.rhythm, note.pitch, note.tie);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Looks like we are done, lets press it.\r\n        return conductor.finish();\r\n    };\r\n\r\n    /**\r\n     * Create a new instrument\r\n     *\r\n     * @param [name] - defaults to sine\r\n     * @param [pack] - defaults to oscillators\r\n     */\r\n    conductor.createInstrument = function(name, pack) {\r\n        var Instrument = _dereq_('./instrument.js'),\r\n            instrument = new Instrument(name, pack, conductor);\r\n        conductor.instruments.push(instrument);\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Needs to be called after all the instruments have been filled with notes.\r\n     * It will figure out the total duration of the song based on the longest\r\n     * duration out of all the instruments.  It will then pass back the Player Object\r\n     * which is used to control the music (play, stop, pause, loop, volume, tempo)\r\n     *\r\n     * It returns the Player object.\r\n     */\r\n    conductor.finish = function() {\r\n        var Player = _dereq_('./player.js');\r\n        player = new Player(conductor);\r\n\r\n        return player;\r\n    };\r\n\r\n    /**\r\n     * Remove all instruments and recreate AudioContext\r\n     */\r\n    conductor.destroy = function() {\r\n        conductor.audioContext = new AudioContext();\r\n        conductor.instruments.length = 0;\r\n        conductor.masterVolume = conductor.audioContext.createGain();\r\n        conductor.masterVolume.connect(conductor.audioContext.destination);\r\n    };\r\n\r\n    /**\r\n     * Set Master Volume\r\n     */\r\n    conductor.setMasterVolume = function(volume) {\r\n        if (volume > 1) {\r\n            volume = volume / 100;\r\n        }\r\n        conductor.masterVolumeLevel = volume;\r\n        conductor.masterVolume.gain.setValueAtTime(volume, conductor.audioContext.currentTime);\r\n    };\r\n\r\n    /**\r\n     * Grab the total duration of a song\r\n     *\r\n     * @returns {number}\r\n     */\r\n    conductor.getTotalSeconds = function() {\r\n        return Math.round(conductor.totalDuration);\r\n    };\r\n\r\n    /**\r\n     * Sets the ticker callback function. This function will be called\r\n     * every time the current seconds has changed.\r\n     *\r\n     * @param cb function\r\n     */\r\n    conductor.setTickerCallback = function(cb) {\r\n        if (typeof cb !== 'function') {\r\n            throw new Error('Ticker must be a function.');\r\n        }\r\n\r\n        conductor.onTickerCallback = cb;\r\n    };\r\n\r\n    /**\r\n     * Sets the time signature for the music. Just like in notation 4/4 time would be setTimeSignature(4, 4);\r\n     * @param top - Number of beats per bar\r\n     * @param bottom - What note type has the beat\r\n     */\r\n    conductor.setTimeSignature = function(top, bottom) {\r\n        if (typeof signatureToNoteLengthRatio[bottom] === 'undefined') {\r\n            throw new Error('The bottom time signature is not supported.');\r\n        }\r\n\r\n        // Not used at the moment, but will be handy in the future.\r\n        conductor.beatsPerBar = top;\r\n        conductor.noteGetsBeat = signatureToNoteLengthRatio[bottom];\r\n    };\r\n\r\n    /**\r\n     * Sets the tempo\r\n     *\r\n     * @param t\r\n     */\r\n    conductor.setTempo = function(t) {\r\n        conductor.tempo = 60 / t;\r\n\r\n        // If we have a player instance, we need to recalculate duration after resetting the tempo.\r\n        if (player) {\r\n            player.resetTempo();\r\n            conductor.onDurationChangeCallback();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set a callback to fire when the song is finished\r\n     *\r\n     * @param cb\r\n     */\r\n    conductor.setOnFinishedCallback = function(cb) {\r\n        if (typeof cb !== 'function') {\r\n            throw new Error('onFinished callback must be a function.');\r\n        }\r\n\r\n        conductor.onFinishedCallback = cb;\r\n    };\r\n\r\n    /**\r\n     * Set a callback to fire when duration of a song changes\r\n     *\r\n     * @param cb\r\n     */\r\n    conductor.setOnDurationChangeCallback = function(cb) {\r\n        if (typeof cb !== 'function') {\r\n            throw new Error('onDurationChanged callback must be a function.');\r\n        }\r\n\r\n        conductor.onDurationChangeCallback = cb;\r\n    };\r\n\r\n    /**\r\n     * Set the number of notes that are buffered every (tempo / 60 * 5) seconds.\r\n     * It's set to 20 notes by default.\r\n     *\r\n     * **WARNING** The higher this is, the more memory is used and can crash your browser.\r\n     *             If notes are being dropped, you can increase this, but be weary of\r\n     *             used memory.\r\n     *\r\n     * @param {Integer} len\r\n     */\r\n    conductor.setNoteBufferLength = function(len) {\r\n        conductor.noteBufferLength = len;\r\n    };\r\n\r\n    conductor.setMasterVolume(100);\r\n    conductor.setTempo(120);\r\n    conductor.setTimeSignature(4, 4);\r\n}\r\n\r\nConductor.loadPack = function(type, name, data) {\r\n    if (['tuning', 'rhythm', 'instrument'].indexOf(type) === -1) {\r\n        throw new Error(type + ' is not a valid Pack Type.');\r\n    }\r\n\r\n    if (typeof packs[type][name] !== 'undefined') {\r\n        throw new Error('A(n) ' + type + ' pack with the name \"' + name + '\" has already been loaded.');\r\n    }\r\n\r\n    packs[type][name] = data;\r\n};\r\n\r\n},{\"./instrument.js\":5,\"./player.js\":7,\"audiocontext\":1}],3:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\nmodule.exports = NoisesInstrumentPack;\r\n\r\n/**\r\n * Noises Instrument Pack\r\n *\r\n * Adapted from: https://github.com/zacharydenton/noise.js\r\n *\r\n * @param name\r\n * @param audioContext\r\n * @returns {{createNote: createNote}}\r\n * @constructor\r\n */\r\nfunction NoisesInstrumentPack(name, audioContext) {\r\n    var types = [\r\n        'white',\r\n        'pink',\r\n        'brown',\r\n        'brownian',\r\n        'red'\r\n    ];\r\n\r\n    if (types.indexOf(name) === -1) {\r\n        throw new Error(name + ' is not a valid noise sound');\r\n    }\r\n\r\n    return {\r\n        createNote: function(destination) {\r\n            switch (name) {\r\n                case 'white':\r\n                    return createWhiteNoise(destination);\r\n                case 'pink':\r\n                    return createPinkNoise(destination);\r\n                case 'brown':\r\n                case 'brownian':\r\n                case 'red':\r\n                    return createBrownianNoise(destination);\r\n            }\r\n        }\r\n    };\r\n\r\n    function createWhiteNoise(destination) {\r\n        var bufferSize = 2 * audioContext.sampleRate,\r\n            noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate),\r\n            output = noiseBuffer.getChannelData(0);\r\n        for (var i = 0; i < bufferSize; i++) {\r\n            output[i] = Math.random() * 2 - 1;\r\n        }\r\n\r\n        var whiteNoise = audioContext.createBufferSource();\r\n        whiteNoise.buffer = noiseBuffer;\r\n        whiteNoise.loop = true;\r\n\r\n        whiteNoise.connect(destination);\r\n\r\n        return whiteNoise;\r\n    }\r\n\r\n    function createPinkNoise(destination) {\r\n        var bufferSize = 2 * audioContext.sampleRate,\r\n            noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate),\r\n            output = noiseBuffer.getChannelData(0),\r\n            b0, b1, b2, b3, b4, b5, b6;\r\n\r\n        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\r\n        for (var i = 0; i < bufferSize; i++) {\r\n            var white = Math.random() * 2 - 1;\r\n            b0 = 0.99886 * b0 + white * 0.0555179;\r\n            b1 = 0.99332 * b1 + white * 0.0750759;\r\n            b2 = 0.96900 * b2 + white * 0.1538520;\r\n            b3 = 0.86650 * b3 + white * 0.3104856;\r\n            b4 = 0.55000 * b4 + white * 0.5329522;\r\n            b5 = -0.7616 * b5 - white * 0.0168980;\r\n            output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\r\n            output[i] *= 0.11;\r\n            b6 = white * 0.115926;\r\n        }\r\n\r\n        var pinkNoise = audioContext.createBufferSource();\r\n        pinkNoise.buffer = noiseBuffer;\r\n        pinkNoise.loop = true;\r\n\r\n        pinkNoise.connect(destination);\r\n\r\n        return pinkNoise;\r\n    }\r\n\r\n    function createBrownianNoise(destination) {\r\n        var bufferSize = 2 * audioContext.sampleRate,\r\n            noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate),\r\n            output = noiseBuffer.getChannelData(0),\r\n            lastOut = 0.0;\r\n        for (var i = 0; i < bufferSize; i++) {\r\n            var white = Math.random() * 2 - 1;\r\n            output[i] = (lastOut + (0.02 * white)) / 1.02;\r\n            lastOut = output[i];\r\n            output[i] *= 3.5;\r\n        }\r\n\r\n        var brownianNoise = audioContext.createBufferSource();\r\n        brownianNoise.buffer = noiseBuffer;\r\n        brownianNoise.loop = true;\r\n\r\n        brownianNoise.connect(destination);\r\n\r\n        return brownianNoise;\r\n    }\r\n}\r\n\r\n},{}],4:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\nmodule.exports = OscillatorInstrumentPack;\r\n\r\n/**\r\n * Oscillator Instrument Pack\r\n *\r\n * @param name\r\n * @param audioContext\r\n * @returns {{createNote: createNote}}\r\n * @constructor\r\n */\r\nfunction OscillatorInstrumentPack(name, audioContext) {\r\n    var types = ['sine', 'square', 'sawtooth', 'triangle'];\r\n\r\n    if (types.indexOf(name) === -1) {\r\n        throw new Error(name + ' is not a valid Oscillator type');\r\n    }\r\n\r\n    return {\r\n        createNote: function(destination, frequency) {\r\n            var o = audioContext.createOscillator();\r\n\r\n            // Connect note to volume\r\n            o.connect(destination);\r\n            // Set pitch type\r\n            o.type = name;\r\n            // Set frequency\r\n            o.frequency.value = frequency;\r\n\r\n            return o;\r\n        }\r\n    };\r\n}\r\n\r\n},{}],5:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\nmodule.exports = Instrument;\r\n\r\n/**\r\n * Instrument Class - Gets instantiated when `Conductor.createInstrument()` is called.\r\n *\r\n * @param name\r\n * @param pack\r\n * @param conductor\r\n * @constructor\r\n */\r\nfunction Instrument(name, pack, conductor) {\r\n    // Default to Sine Oscillator\r\n    if (! name) {\r\n        name = 'sine';\r\n    }\r\n    if (! pack) {\r\n        pack = 'oscillators';\r\n    }\r\n\r\n    if (typeof conductor.packs.instrument[pack] === 'undefined') {\r\n        throw new Error(pack + ' is not a currently loaded Instrument Pack.');\r\n    }\r\n\r\n    /**\r\n     * Helper function to figure out how long a note is\r\n     *\r\n     * @param rhythm\r\n     * @returns {number}\r\n     */\r\n    function getDuration(rhythm) {\r\n        if (typeof conductor.notes[rhythm] === 'undefined') {\r\n            throw new Error(rhythm + ' is not a correct rhythm.');\r\n        }\r\n\r\n        return conductor.notes[rhythm] * conductor.tempo / conductor.noteGetsBeat * 10;\r\n    }\r\n\r\n    /**\r\n     * Helper function to clone an object\r\n     *\r\n     * @param obj\r\n     * @returns {copy}\r\n     */\r\n    function clone(obj) {\r\n        if (null === obj || \"object\" != typeof obj) {\r\n            return obj;\r\n        }\r\n        var copy = obj.constructor();\r\n        for (var attr in obj) {\r\n            if (obj.hasOwnProperty(attr)) {\r\n                copy[attr] = obj[attr];\r\n            }\r\n        }\r\n\r\n        return copy;\r\n    }\r\n\r\n    \r\n    var instrument = this,\r\n        lastRepeatCount = 0,\r\n        volumeLevel = 1,\r\n        articulationGapPercentage = 0.05;\r\n\r\n    instrument.totalDuration = 0;\r\n    instrument.bufferPosition = 0;\r\n    instrument.instrument = conductor.packs.instrument[pack](name, conductor.audioContext);\r\n    instrument.notes = [];\r\n    \r\n    /**\r\n     * Set volume level for an instrument\r\n     *\r\n     * @param newVolumeLevel\r\n     */\r\n    instrument.setVolume = function(newVolumeLevel) {\r\n        if (newVolumeLevel > 1) {\r\n            newVolumeLevel = newVolumeLevel / 100;\r\n        }\r\n        volumeLevel = newVolumeLevel;\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Add a note to an instrument\r\n     * @param rhythm\r\n     * @param [pitch] - Comma separated string if more than one pitch\r\n     * @param [tie]\r\n     */\r\n    instrument.note = function(rhythm, pitch, tie) {\r\n        var duration = getDuration(rhythm),\r\n            articulationGap = tie ? 0 : duration * articulationGapPercentage;\r\n\r\n        if (pitch) {\r\n            pitch = pitch.split(',');\r\n            var index = -1;\r\n            while (++ index < pitch.length) {\r\n                var p = pitch[index];\r\n                p = p.trim();\r\n                if (typeof conductor.pitches[p] === 'undefined') {\r\n                    p = parseFloat(p);\r\n                    if (isNaN(p) || p < 0) {\r\n                        throw new Error(p + ' is not a valid pitch.');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        instrument.notes.push({\r\n            rhythm: rhythm,\r\n            pitch: pitch,\r\n            duration: duration,\r\n            articulationGap: articulationGap,\r\n            tie: tie,\r\n            startTime: instrument.totalDuration,\r\n            stopTime: instrument.totalDuration + duration - articulationGap,\r\n            // Volume needs to be a quarter of the master so it doesn't clip\r\n            volumeLevel: volumeLevel / 4\r\n        });\r\n\r\n        instrument.totalDuration += duration;\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Add a rest to an instrument\r\n     *\r\n     * @param rhythm\r\n     */\r\n    instrument.rest = function(rhythm) {\r\n        var duration = getDuration(rhythm);\r\n\r\n        instrument.notes.push({\r\n            rhythm: rhythm,\r\n            pitch: false,\r\n            duration: duration,\r\n            articulationGap: 0,\r\n            startTime: instrument.totalDuration,\r\n            stopTime: instrument.totalDuration + duration\r\n        });\r\n\r\n        instrument.totalDuration += duration;\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Place where a repeat section should start\r\n     */\r\n    instrument.repeatStart = function() {\r\n        lastRepeatCount = instrument.notes.length;\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Repeat from beginning\r\n     */\r\n    instrument.repeatFromBeginning = function(numOfRepeats) {\r\n        lastRepeatCount = 0;\r\n        instrument.repeat(numOfRepeats);\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Number of times the section should repeat\r\n     * @param [numOfRepeats] - defaults to 1\r\n     */\r\n    instrument.repeat = function(numOfRepeats) {\r\n        numOfRepeats = typeof numOfRepeats === 'undefined' ? 1 : numOfRepeats;\r\n        var notesBufferCopy = instrument.notes.slice(lastRepeatCount);\r\n        for (var r = 0; r < numOfRepeats; r ++) {\r\n            var index = -1;\r\n            while (++index < notesBufferCopy.length) {\r\n                var noteCopy = clone(notesBufferCopy[index]);\r\n\r\n                noteCopy.startTime = instrument.totalDuration;\r\n                noteCopy.stopTime = instrument.totalDuration + noteCopy.duration - noteCopy.articulationGap;\r\n\r\n                instrument.notes.push(noteCopy);\r\n                instrument.totalDuration += noteCopy.duration;\r\n            }\r\n        }\r\n\r\n        return instrument;\r\n    };\r\n\r\n    /**\r\n     * Reset the duration, start, and stop time of each note.\r\n     */\r\n    instrument.resetDuration = function() {\r\n        var index = -1,\r\n            numOfNotes = instrument.notes.length;\r\n\r\n        instrument.totalDuration = 0;\r\n\r\n        while (++index < numOfNotes) {\r\n            var note = instrument.notes[index],\r\n                duration = getDuration(note.rhythm),\r\n                articulationGap = note.tie ? 0 : duration * articulationGapPercentage;\r\n\r\n            note.duration = getDuration(note.rhythm);\r\n            note.startTime = instrument.totalDuration;\r\n            note.stopTime = instrument.totalDuration + duration - articulationGap;\r\n\r\n            if (note.pitch !== false) {\r\n                note.articulationGap = articulationGap;\r\n            }\r\n\r\n            instrument.totalDuration += duration;\r\n        }\r\n    };\r\n}\r\n\r\n},{}],6:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\n\r\n/**\r\n * @type {BandJS}\r\n */\r\nmodule.exports = _dereq_('./conductor.js');\r\n\r\nmodule.exports.loadPack('instrument', 'noises', _dereq_('./instrument-packs/noises.js'));\r\nmodule.exports.loadPack('instrument', 'oscillators', _dereq_('./instrument-packs/oscillators.js'));\r\nmodule.exports.loadPack('rhythm', 'northAmerican', _dereq_('./rhythm-packs/north-american.js'));\r\nmodule.exports.loadPack('rhythm', 'european', _dereq_('./rhythm-packs/european.js'));\r\nmodule.exports.loadPack('tuning', 'equalTemperament', _dereq_('./tuning-packs/equal-temperament.js'));\r\n\r\n},{\"./conductor.js\":2,\"./instrument-packs/noises.js\":3,\"./instrument-packs/oscillators.js\":4,\"./rhythm-packs/european.js\":8,\"./rhythm-packs/north-american.js\":9,\"./tuning-packs/equal-temperament.js\":10}],7:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\nmodule.exports = Player;\r\n\r\n/**\r\n * Player Class - This gets instantiated by the Conductor class when `Conductor.finish()` is called\r\n *\r\n * @param conductor\r\n * @constructor\r\n */\r\nfunction Player(conductor) {\r\n    var player = this,\r\n        bufferTimeout,\r\n        allNotes = bufferNotes(),\r\n        currentPlayTime,\r\n        totalPlayTime = 0,\r\n        faded = false;\r\n\r\n    calculateTotalDuration();\r\n\r\n    /**\r\n     * Helper function to stop all notes and\r\n     * then re-buffers them\r\n     *\r\n     * @param {Boolean} [resetDuration]\r\n     */\r\n    function reset(resetDuration) {\r\n        // Reset the buffer position of all instruments\r\n        var index = -1,\r\n            numOfInstruments = conductor.instruments.length;\r\n        while (++index < numOfInstruments) {\r\n            var instrument = conductor.instruments[index];\r\n\r\n            if (resetDuration) {\r\n                instrument.resetDuration();\r\n            }\r\n            instrument.bufferPosition = 0;\r\n        }\r\n\r\n        // If we are reseting the duration, we need to figure out the new total duration.\r\n        // Also set the totalPlayTime to the current percentage done of the new total duration.\r\n        if (resetDuration) {\r\n            calculateTotalDuration();\r\n            totalPlayTime = conductor.percentageComplete * conductor.totalDuration;\r\n        }\r\n\r\n        index = -1;\r\n        while (++index < allNotes.length) {\r\n            allNotes[index].gain.disconnect();\r\n        }\r\n\r\n        clearTimeout(bufferTimeout);\r\n\r\n        allNotes = bufferNotes();\r\n    }\r\n\r\n    /**\r\n     * Helper function to fade up/down master volume\r\n     *\r\n     * @param direction - up or down\r\n     * @param [cb] - Callback function fired after the transition is completed\r\n     * @param [resetVolume] - Reset the volume back to it's original level\r\n     */\r\n    function fade(direction, cb, resetVolume) {\r\n        if (typeof resetVolume === 'undefined') {\r\n            resetVolume = false;\r\n        }\r\n        if ('up' !== direction && 'down' !== direction) {\r\n            throw new Error('Direction must be either up or down.');\r\n        }\r\n\r\n        var fadeDuration = 0.2;\r\n\r\n        faded = direction === 'down';\r\n\r\n        if (direction === 'up') {\r\n            conductor.masterVolume.gain.linearRampToValueAtTime(0, conductor.audioContext.currentTime);\r\n            conductor.masterVolume.gain.linearRampToValueAtTime(conductor.masterVolumeLevel, conductor.audioContext.currentTime + fadeDuration);\r\n        } else {\r\n            conductor.masterVolume.gain.linearRampToValueAtTime(conductor.masterVolumeLevel, conductor.audioContext.currentTime);\r\n            conductor.masterVolume.gain.linearRampToValueAtTime(0, conductor.audioContext.currentTime + fadeDuration);\r\n        }\r\n\r\n        setTimeout(function() {\r\n            if (typeof cb === 'function') {\r\n                cb.call(player);\r\n            }\r\n\r\n            if (resetVolume) {\r\n                faded = ! faded;\r\n                conductor.masterVolume.gain.linearRampToValueAtTime(conductor.masterVolumeLevel, conductor.audioContext.currentTime);\r\n            }\r\n        }, fadeDuration * 1000);\r\n    }\r\n\r\n    /**\r\n     * Calculates the total duration of a song based on the longest duration of all instruments.\r\n     */\r\n    function calculateTotalDuration() {\r\n        var index = -1;\r\n        var totalDuration = 0;\r\n        while (++index < conductor.instruments.length) {\r\n            var instrument = conductor.instruments[index];\r\n            if (instrument.totalDuration > totalDuration) {\r\n                totalDuration = instrument.totalDuration;\r\n            }\r\n        }\r\n\r\n        conductor.totalDuration = totalDuration;\r\n    }\r\n\r\n    /**\r\n     * Grabs a set of notes based on the current time and what the Buffer Size is.\r\n     * It will also skip any notes that have a start time less than the\r\n     * total play time.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    function bufferNotes() {\r\n        var notes = [],\r\n            index = -1,\r\n            bufferSize = conductor.noteBufferLength;\r\n\r\n        while (++index < conductor.instruments.length) {\r\n            var instrument = conductor.instruments[index];\r\n            // Create volume for this instrument\r\n            var bufferCount = bufferSize;\r\n            var index2 = -1;\r\n            while (++index2 < bufferCount) {\r\n                var note = instrument.notes[instrument.bufferPosition + index2];\r\n\r\n                if (typeof note === 'undefined') {\r\n                    break;\r\n                }\r\n\r\n                var pitch = note.pitch,\r\n                    startTime = note.startTime,\r\n                    stopTime = note.stopTime,\r\n                    volumeLevel = note.volumeLevel;\r\n\r\n                if (stopTime < totalPlayTime) {\r\n                    bufferCount ++;\r\n                    continue;\r\n                }\r\n\r\n                // If pitch is false, then it's a rest and we don't need a note\r\n                if (false === pitch) {\r\n                    continue;\r\n                }\r\n\r\n                var gain = conductor.audioContext.createGain();\r\n                // Connect volume gain to the Master Volume;\r\n                gain.connect(conductor.masterVolume);\r\n                gain.gain.value = volumeLevel;\r\n\r\n                // If the startTime is less than total play time, we need to start the note\r\n                // in the middle\r\n                if (startTime < totalPlayTime) {\r\n                    startTime = stopTime - totalPlayTime;\r\n                }\r\n\r\n                // No pitches defined\r\n                if (typeof pitch === 'undefined') {\r\n                    notes.push({\r\n                        startTime: startTime < totalPlayTime ? stopTime - totalPlayTime : startTime,\r\n                        stopTime: stopTime,\r\n                        node: instrument.instrument.createNote(gain),\r\n                        gain: gain,\r\n                        volumeLevel: volumeLevel\r\n                    });\r\n                } else {\r\n                    var index3 = -1;\r\n                    while (++index3 < pitch.length) {\r\n                        var p = pitch[index3];\r\n                        notes.push({\r\n                            startTime: startTime,\r\n                            stopTime: stopTime,\r\n                            node: instrument.instrument.createNote(gain, conductor.pitches[p.trim()] || parseFloat(p)),\r\n                            gain: gain,\r\n                            volumeLevel: volumeLevel\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            instrument.bufferPosition += bufferCount;\r\n        }\r\n\r\n        // Return array of notes\r\n        return notes;\r\n    }\r\n\r\n    function totalPlayTimeCalculator() {\r\n        if (! player.paused && player.playing) {\r\n            if (conductor.totalDuration < totalPlayTime) {\r\n                player.stop(false);\r\n                if (player.looping) {\r\n                    player.play();\r\n                } else  {\r\n                    conductor.onFinishedCallback();\r\n                }\r\n            } else {\r\n                updateTotalPlayTime();\r\n                setTimeout(totalPlayTimeCalculator, 1000 / 60);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Call to update the total play time so far\r\n     */\r\n    function updateTotalPlayTime() {\r\n        totalPlayTime += conductor.audioContext.currentTime - currentPlayTime;\r\n        var seconds = Math.round(totalPlayTime);\r\n        if (seconds != conductor.currentSeconds) {\r\n            // Make callback asynchronous\r\n            setTimeout(function() {\r\n                conductor.onTickerCallback(seconds);\r\n            }, 1);\r\n            conductor.currentSeconds = seconds;\r\n        }\r\n        conductor.percentageComplete = totalPlayTime / conductor.totalDuration;\r\n        currentPlayTime = conductor.audioContext.currentTime;\r\n    }\r\n\r\n    player.paused = false;\r\n    player.playing = false;\r\n    player.looping = false;\r\n    player.muted = false;\r\n    \r\n    /**\r\n     * Grabs currently buffered notes and calls their start/stop methods.\r\n     *\r\n     * It then sets up a timer to buffer up the next set of notes based on the\r\n     * a set buffer size.  This will keep going until the song is stopped or paused.\r\n     *\r\n     * It will use the total time played so far as an offset so you pause/play the music\r\n     */\r\n    player.play = function() {\r\n        player.playing = true;\r\n        player.paused = false;\r\n        currentPlayTime = conductor.audioContext.currentTime;\r\n        // Starts calculator which keeps track of total play time\r\n        totalPlayTimeCalculator();\r\n        var timeOffset = conductor.audioContext.currentTime - totalPlayTime,\r\n            playNotes = function(notes) {\r\n                var index = -1;\r\n                while (++index < notes.length) {\r\n                    var note = notes[index];\r\n                    var startTime = note.startTime + timeOffset,\r\n                        stopTime = note.stopTime + timeOffset;\r\n\r\n                    /**\r\n                     * If no tie, then we need to introduce a volume ramp up to remove any clipping\r\n                     * as Oscillators have an issue with this when playing a note at full volume.\r\n                     * We also put in a slight ramp down as well.  This only takes up 1/1000 of a second.\r\n                     */\r\n                    if (! note.tie) {\r\n                        if (startTime > 0) {\r\n                            startTime -= 0.001;\r\n                        }\r\n                        stopTime += 0.001;\r\n                        note.gain.gain.setValueAtTime(0.0, startTime);\r\n                        note.gain.gain.linearRampToValueAtTime(note.volumeLevel, startTime + 0.001);\r\n                        note.gain.gain.setValueAtTime(note.volumeLevel, stopTime - 0.001);\r\n                        note.gain.gain.linearRampToValueAtTime(0.0, stopTime);\r\n                    }\r\n\r\n                    note.node.start(startTime);\r\n                    note.node.stop(stopTime);\r\n                }\r\n            },\r\n            bufferUp = function() {\r\n                bufferTimeout = setTimeout(function bufferInNewNotes() {\r\n                    if (player.playing && ! player.paused) {\r\n                        var newNotes = bufferNotes();\r\n                        if (newNotes.length > 0) {\r\n                            playNotes(newNotes);\r\n                            allNotes = allNotes.concat(newNotes);\r\n                            bufferUp();\r\n                        }\r\n                    }\r\n                }, conductor.tempo * 5000);\r\n            };\r\n\r\n        playNotes(allNotes);\r\n        bufferUp();\r\n\r\n        if (faded && ! player.muted) {\r\n            fade('up');\r\n        }\r\n    };\r\n    /**\r\n     * Stop playing all music and rewind the song\r\n     *\r\n     * @param fadeOut boolean - should the song fade out?\r\n     */\r\n    player.stop = function(fadeOut) {\r\n        player.playing = false;\r\n        conductor.currentSeconds = 0;\r\n        conductor.percentageComplete = 0;\r\n\r\n        if (typeof fadeOut === 'undefined') {\r\n            fadeOut = true;\r\n        }\r\n        if (fadeOut && ! player.muted) {\r\n            fade('down', function() {\r\n                totalPlayTime = 0;\r\n                reset();\r\n                // Make callback asynchronous\r\n                setTimeout(function() {\r\n                    conductor.onTickerCallback(conductor.currentSeconds);\r\n                }, 1);\r\n            }, true);\r\n        } else {\r\n            totalPlayTime = 0;\r\n            reset();\r\n            // Make callback asynchronous\r\n            setTimeout(function() {\r\n                conductor.onTickerCallback(conductor.currentSeconds);\r\n            }, 1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Pauses the music, resets the notes,\r\n     * and gets the total time played so far\r\n     */\r\n    player.pause = function() {\r\n        player.paused = true;\r\n        updateTotalPlayTime();\r\n        if (player.muted) {\r\n            reset();\r\n        } else {\r\n            fade('down', function() {\r\n                reset();\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set true if you want the song to loop\r\n     *\r\n     * @param val\r\n     */\r\n    player.loop = function(val) {\r\n        player.looping = !! val;\r\n    };\r\n\r\n    /**\r\n     * Set a specific time that the song should start it.\r\n     * If it's already playing, reset and start the song\r\n     * again so it has a seamless jump.\r\n     *\r\n     * @param newTime\r\n     */\r\n    player.setTime = function(newTime) {\r\n        totalPlayTime = parseInt(newTime);\r\n        reset();\r\n        if (player.playing && ! player.paused) {\r\n            player.play();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset the tempo for a song. This will trigger a\r\n     * duration reset for each instrument as well.\r\n     */\r\n    player.resetTempo = function() {\r\n        reset(true);\r\n        if (player.playing && ! player.paused) {\r\n            player.play();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Mute all of the music\r\n     *\r\n     * @param cb - Callback function called when music has been muted\r\n     */\r\n    player.mute = function(cb) {\r\n        player.muted = true;\r\n        fade('down', cb);\r\n    };\r\n\r\n    /**\r\n     * Unmute all of the music\r\n     *\r\n     * @param cb - Callback function called when music has been unmuted\r\n     */\r\n    player.unmute = function(cb) {\r\n        player.muted = false;\r\n        fade('up', cb);\r\n    };\r\n}\r\n\r\n},{}],8:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\n\r\n/**\r\n * European Rhythm Pack\r\n */\r\nmodule.exports = {\r\n    semibreve: 1,\r\n    dottedMinim: 0.75,\r\n    minim: 0.5,\r\n    dottedCrotchet: 0.375,\r\n    tripletMinim: 0.33333334,\r\n    crotchet: 0.25,\r\n    dottedQuaver: 0.1875,\r\n    tripletCrotchet: 0.166666667,\r\n    quaver: 0.125,\r\n    dottedSemiquaver: 0.09375,\r\n    tripletQuaver: 0.083333333,\r\n    semiquaver: 0.0625,\r\n    tripletSemiquaver: 0.041666667,\r\n    demisemiquaver: 0.03125\r\n};\r\n\r\n},{}],9:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\n\r\n/**\r\n * North American (Canada and USA) Rhythm Pack\r\n */\r\nmodule.exports = {\r\n    whole: 1,\r\n    dottedHalf: 0.75,\r\n    half: 0.5,\r\n    dottedQuarter: 0.375,\r\n    tripletHalf: 0.33333334,\r\n    quarter: 0.25,\r\n    dottedEighth: 0.1875,\r\n    tripletQuarter: 0.166666667,\r\n    eighth: 0.125,\r\n    dottedSixteenth: 0.09375,\r\n    tripletEighth: 0.083333333,\r\n    sixteenth: 0.0625,\r\n    tripletSixteenth: 0.041666667,\r\n    thirtySecond: 0.03125\r\n};\r\n\r\n},{}],10:[function(_dereq_,module,exports){\r\n/**\r\n * Band.js - Music Composer\r\n * An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex\r\n * time signatures.\r\n *\r\n * @author Cody Lundquist (http://github.com/meenie) - 2014\r\n */\r\n\r\n/**\r\n * Equal Temperament Tuning\r\n * Source: http://www.phy.mtu.edu/~suits/notefreqs.html\r\n */\r\nmodule.exports = {\r\n    'C0': 16.35,\r\n    'C#0': 17.32,\r\n    'Db0': 17.32,\r\n    'D0': 18.35,\r\n    'D#0': 19.45,\r\n    'Eb0': 19.45,\r\n    'E0': 20.60,\r\n    'F0': 21.83,\r\n    'F#0': 23.12,\r\n    'Gb0': 23.12,\r\n    'G0': 24.50,\r\n    'G#0': 25.96,\r\n    'Ab0': 25.96,\r\n    'A0': 27.50,\r\n    'A#0': 29.14,\r\n    'Bb0': 29.14,\r\n    'B0': 30.87,\r\n    'C1': 32.70,\r\n    'C#1': 34.65,\r\n    'Db1': 34.65,\r\n    'D1': 36.71,\r\n    'D#1': 38.89,\r\n    'Eb1': 38.89,\r\n    'E1': 41.20,\r\n    'F1': 43.65,\r\n    'F#1': 46.25,\r\n    'Gb1': 46.25,\r\n    'G1': 49.00,\r\n    'G#1': 51.91,\r\n    'Ab1': 51.91,\r\n    'A1': 55.00,\r\n    'A#1': 58.27,\r\n    'Bb1': 58.27,\r\n    'B1': 61.74,\r\n    'C2': 65.41,\r\n    'C#2': 69.30,\r\n    'Db2': 69.30,\r\n    'D2': 73.42,\r\n    'D#2': 77.78,\r\n    'Eb2': 77.78,\r\n    'E2': 82.41,\r\n    'F2': 87.31,\r\n    'F#2': 92.50,\r\n    'Gb2': 92.50,\r\n    'G2': 98.00,\r\n    'G#2': 103.83,\r\n    'Ab2': 103.83,\r\n    'A2': 110.00,\r\n    'A#2': 116.54,\r\n    'Bb2': 116.54,\r\n    'B2': 123.47,\r\n    'C3': 130.81,\r\n    'C#3': 138.59,\r\n    'Db3': 138.59,\r\n    'D3': 146.83,\r\n    'D#3': 155.56,\r\n    'Eb3': 155.56,\r\n    'E3': 164.81,\r\n    'F3': 174.61,\r\n    'F#3': 185.00,\r\n    'Gb3': 185.00,\r\n    'G3': 196.00,\r\n    'G#3': 207.65,\r\n    'Ab3': 207.65,\r\n    'A3': 220.00,\r\n    'A#3': 233.08,\r\n    'Bb3': 233.08,\r\n    'B3': 246.94,\r\n    'C4': 261.63,\r\n    'C#4': 277.18,\r\n    'Db4': 277.18,\r\n    'D4': 293.66,\r\n    'D#4': 311.13,\r\n    'Eb4': 311.13,\r\n    'E4': 329.63,\r\n    'F4': 349.23,\r\n    'F#4': 369.99,\r\n    'Gb4': 369.99,\r\n    'G4': 392.00,\r\n    'G#4': 415.30,\r\n    'Ab4': 415.30,\r\n    'A4': 440.00,\r\n    'A#4': 466.16,\r\n    'Bb4': 466.16,\r\n    'B4': 493.88,\r\n    'C5': 523.25,\r\n    'C#5': 554.37,\r\n    'Db5': 554.37,\r\n    'D5': 587.33,\r\n    'D#5': 622.25,\r\n    'Eb5': 622.25,\r\n    'E5': 659.26,\r\n    'F5': 698.46,\r\n    'F#5': 739.99,\r\n    'Gb5': 739.99,\r\n    'G5': 783.99,\r\n    'G#5': 830.61,\r\n    'Ab5': 830.61,\r\n    'A5': 880.00,\r\n    'A#5': 932.33,\r\n    'Bb5': 932.33,\r\n    'B5': 987.77,\r\n    'C6': 1046.50,\r\n    'C#6': 1108.73,\r\n    'Db6': 1108.73,\r\n    'D6': 1174.66,\r\n    'D#6': 1244.51,\r\n    'Eb6': 1244.51,\r\n    'E6': 1318.51,\r\n    'F6': 1396.91,\r\n    'F#6': 1479.98,\r\n    'Gb6': 1479.98,\r\n    'G6': 1567.98,\r\n    'G#6': 1661.22,\r\n    'Ab6': 1661.22,\r\n    'A6': 1760.00,\r\n    'A#6': 1864.66,\r\n    'Bb6': 1864.66,\r\n    'B6': 1975.53,\r\n    'C7': 2093.00,\r\n    'C#7': 2217.46,\r\n    'Db7': 2217.46,\r\n    'D7': 2349.32,\r\n    'D#7': 2489.02,\r\n    'Eb7': 2489.02,\r\n    'E7': 2637.02,\r\n    'F7': 2793.83,\r\n    'F#7': 2959.96,\r\n    'Gb7': 2959.96,\r\n    'G7': 3135.96,\r\n    'G#7': 3322.44,\r\n    'Ab7': 3322.44,\r\n    'A7': 3520.00,\r\n    'A#7': 3729.31,\r\n    'Bb7': 3729.31,\r\n    'B7': 3951.07,\r\n    'C8': 4186.01\r\n};\r\n\r\n},{}]},{},[6])\r\n(6)\r\n});","import BandJS from '../band.js/dist/band';\r\nimport React, { Component } from 'react';\r\n\r\nclass Audio extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tplayer: 2,\r\n\t\t};\r\n\t}\r\n\tplayHandler = () => {\r\n\t\tif (this.state.player) {\r\n\t\t\tconsole.log(this.state.player);\r\n\t\t\tthis.state.player.stop();\r\n\t\t}\r\n\t\tlet conductor = new BandJS();\r\n\t\tlet sectionsProps = [];\r\n\t\tthis.props.analysis.sections.forEach((section) => {\r\n\t\t\tsectionsProps.push([section.duration * 1000, section.tempo]);\r\n\t\t});\r\n\t\tconsole.log(sectionsProps);\r\n\t\tconductor.setTimeSignature(4, 4);\r\n\t\tconductor.setTempo(sectionsProps[0][1]);\r\n\t\tlet piano = conductor.createInstrument('sine');\r\n\t\tpiano.note('quarter', 'G3');\r\n\t\tthis.setState({ player: this.state.player + 1 });\r\n\t\tconsole.log(this.state.player);\r\n\t\tthis.state.player.loop(true);\r\n\t\trhythmTimer(sectionsProps[0][0]);\r\n\t\tfunction rhythmTimer(time) {\r\n\t\t\tthis.state.player.play();\r\n\t\t\tsectionsProps.shift();\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.state.player.stop();\r\n\t\t\t\tif (sectionsProps.length != 0) {\r\n\t\t\t\t\tconductor.setTempo(sectionsProps[0][1]);\r\n\t\t\t\t\tthis.state.player = conductor.finish();\r\n\t\t\t\t\tthis.state.player.loop(true);\r\n\t\t\t\t\trhythmTimer(sectionsProps[0][0]);\r\n\t\t\t\t}\r\n\t\t\t}, time);\r\n\t\t}\r\n\t};\r\n\trender() {\r\n\t\treturn <p onClick={this.playHandler}>click Me</p>;\r\n\t}\r\n}\r\n\r\nexport default Audio;\r\n","import axios from 'axios';\r\nimport Audio from './Audio';\r\nconst TracksResults = props => {\r\n\tconst trackRef = React.createRef();\r\n\tlet analysis;\r\n\tlet [sa, sas] = React.useState(analysis);\r\n\r\n\tlet getAnalysis = e => {\r\n\t\taxios\r\n\t\t\t.get('https://api.spotify.com/v1/audio-analysis/' + e.target.id, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: props.authorization\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(data => {\r\n\t\t\t\tsas(data.data);\r\n\t\t\t\tconsole.log(analysis);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ul ref={trackRef}>\r\n\t\t\t{props.tracks.map(track => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li id={track.id} key={track.id} onClick={getAnalysis}>\r\n\t\t\t\t\t\t{track.name} - {track.artists[0].name} ({track.popularity})\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t\t{}\r\n\t\t\t<Audio analysis={sa}></Audio>\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default TracksResults;\r\n","import React, { Component } from 'react';\r\nimport Rhythm from './rhythm';\r\n\r\nclass Default extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='app'>\r\n\t\t\t\t<h1>Rhythm Detector</h1>\r\n\t\t\t\t<h2>Select your song at the search bar below</h2>\r\n\t\t\t\t<Rhythm></Rhythm>\r\n\t\t\t\t{/*\t<input type='text' />*/}\r\n\t\t\t\t<style global jsx>\r\n\t\t\t\t\t{`\r\n\t\t\t\t\t\tbody,\r\n\t\t\t\t\t\thtml,\r\n\t\t\t\t\t\t#root {\r\n\t\t\t\t\t\t\tmargin: 0;\r\n\t\t\t\t\t\t\theight: 100%;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t*:active,\r\n\t\t\t\t\t\t*:focus {\r\n\t\t\t\t\t\t\toutline-style: none;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t* {\r\n\t\t\t\t\t\t\tbox-sizing: border-box;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t#__next {\r\n\t\t\t\t\t\t\tdisplay: grid;\r\n\t\t\t\t\t\t\tbackground: linear-gradient(to right, #141e30, #243b55);\r\n\t\t\t\t\t\t\theight: 100%;\r\n\t\t\t\t\t\t\twidth: 100%;\r\n\t\t\t\t\t\t\tjustify-items: center;\r\n\t\t\t\t\t\t\talign-items: center;\r\n\t\t\t\t\t\t\tmax-height: 100%;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t`}\r\n\t\t\t\t</style>\r\n\t\t\t\t<style jsx>{`\r\n\t\t\t\t\th1 {\r\n\t\t\t\t\t\tfont-size: 3rem;\r\n\t\t\t\t\t\tbackground: linear-gradient(to right, #f79d00, #64f38c);\r\n\t\t\t\t\t\tbackground-clip: text;\r\n\t\t\t\t\t\t-webkit-text-fill-color: transparent;\r\n\t\t\t\t\t\ttext-shadow: 0px 0px 50px #1ffc442a;\r\n\t\t\t\t\t\tposition: relative;\r\n\t\t\t\t\t}\r\n\t\t\t\t`}</style>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Default;\r\n","import React, { Fragmant, Component } from 'react';\r\nimport axios from 'axios';\r\nimport TracksResults from './TracksResults';\r\n\r\nclass Rhythm extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\ttoken: null,\r\n\t\t\ttrack_list: [],\r\n\t\t\tquery: ''\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst hash = window.location.hash\r\n\t\t\t.substring(1)\r\n\t\t\t.split('&')\r\n\t\t\t.reduce((initial, item) => {\r\n\t\t\t\tif (item) {\r\n\t\t\t\t\tvar parts = item.split('=');\r\n\t\t\t\t\tinitial[parts[0]] = decodeURIComponent(parts[1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn initial;\r\n\t\t\t}, {});\r\n\t\tthis.setState({ token: hash.access_token, token_type: hash.token_type });\r\n\t}\r\n\r\n\tgetTracks = () => {\r\n\t\taxios\r\n\t\t\t.get(\r\n\t\t\t\t`https://api.spotify.com/v1/search?q=${this.state.query}&type=track&limit=5`,\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `${this.state.token_type} ${this.state.token}`\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t.then(data => {\r\n\t\t\t\tthis.setState({ track_list: data.data.tracks.items });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n\r\n\tchangeHandler = () => {\r\n\t\tthis.setState({ query: this.search.value }, () => {\r\n\t\t\tif (this.state.query && this.state.query.length > 1) {\r\n\t\t\t\tthis.getTracks();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({ track_list: [] });\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t{!this.state.token && (\r\n\t\t\t\t\t<button>\r\n\t\t\t\t\t\t<a href='https://accounts.spotify.com/authorize?client_id=58b9c4063c904cda87af80186a732f01&redirect_uri=http:%2F%2Flocalhost:3000&response_type=token'>\r\n\t\t\t\t\t\t\tLogin With Spotify\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t)}\r\n\t\t\t\t{this.state.token && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tref={input => (this.search = input)}\r\n\t\t\t\t\t\t\tonChange={this.changeHandler}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TracksResults\r\n\t\t\t\t\t\t\tauthorization={`${this.state.token_type} ${this.state.token}`}\r\n\t\t\t\t\t\t\ttracks={this.state.track_list}\r\n\t\t\t\t\t\t></TracksResults>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Rhythm;\r\n","module.exports = require(\"axios\");","module.exports = require(\"react\");","module.exports = require(\"styled-jsx/style\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;AAQA;AACA;AACA;AAAA;AAEA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AAOA;AAEA;;;;;;;;;;;AAUA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AARA;AAUA;AAZA;AACA;AAcA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;;;;;;;AAOA;AAEA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAZA;AAcA;AAEA;AAAA;AACA;;;;;;;AAOA;AAEA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;;;;;;;;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAEA;AACA;AAEA;;;;;;;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AAEA;;;;;AAGA;AACA;AAEA;AACA;AAEA;;;;;AAGA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;;;;;;;;AAQA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AAOA;AAEA;;;;;;;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;;;;;;;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAOA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAGA;;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;;;;;;;;AAQA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAiBA;AAAA;AACA;;;;;;;;AAQA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAiBA;AAAA;AACA;;;;;;;;AAQA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzIA;AA4IA;AAjzCA;AAmzCA;;;;;;;;;;;;;;;;;;;;;;ACnzCA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AACA;AADA;AAGA;AACA;AAiCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA3CA;AACA;AA4CA;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AADA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2CA;AACA;AA/CA;AACA;AAgDA;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAwBA;AAIA;AACA;AADA;AADA;AAOA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAxCA;AA0CA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAhDA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA6BA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AA7EA;AACA;AA8EA;;;;;;;;;;;;;;;;;;;;;;;ACnFA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}